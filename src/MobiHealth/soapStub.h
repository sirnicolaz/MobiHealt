/* soapStub.h
   Generated by gSOAP 2.7.15 from soapProxy.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#define SOAP_NAMESPACE_OF_ns1	"http://schema.example.com"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_ns1__Patient
#define SOAP_TYPE_ns1__Patient (7)
/* ns1:Patient */
class SOAP_CMAC ns1__Patient
{
public:
	class ns1__Anagrafica *anagrafica;	/* required element of type ns1:Anagrafica */
	class KeyValueObjectArray *contacts;	/* required element of type ArrayOfKeyValueObject */
	class ImageItemArray *images;	/* required element of type ArrayOfImageItem */
	class ns1__MedicalReport *medicalReport;	/* required element of type ns1:MedicalReport */
	KeyValueObjectArray *pathologies;	/* required element of type ArrayOfKeyValueObject */
	char *patientId;	/* required element of type xsd:string */
	KeyValueObjectArray *visitHistory;	/* required element of type ArrayOfKeyValueObject */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_ns1__Patient */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Patient() : anagrafica(NULL), contacts(NULL), images(NULL), medicalReport(NULL), pathologies(NULL), patientId(NULL), visitHistory(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~ns1__Patient() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Anagrafica
#define SOAP_TYPE_ns1__Anagrafica (8)
/* ns1:Anagrafica */
class SOAP_CMAC ns1__Anagrafica
{
public:
	char *CF;	/* required element of type xsd:string */
	char *GP;	/* required element of type xsd:string */
	char *address;	/* required element of type xsd:string */
	char *birthDate;	/* required element of type xsd:string */
	char *birthLocation;	/* required element of type xsd:string */
	char *cap;	/* required element of type xsd:string */
	char *city;	/* required element of type xsd:string */
	char *lastName;	/* required element of type xsd:string */
	char *marital;	/* required element of type xsd:string */
	char *name;	/* required element of type xsd:string */
	char *patientCode;	/* required element of type xsd:string */
	char *patientId;	/* required element of type xsd:string */
	char *profession;	/* required element of type xsd:string */
	char *province;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_ns1__Anagrafica */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Anagrafica() : CF(NULL), GP(NULL), address(NULL), birthDate(NULL), birthLocation(NULL), cap(NULL), city(NULL), lastName(NULL), marital(NULL), name(NULL), patientCode(NULL), patientId(NULL), profession(NULL), province(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~ns1__Anagrafica() { }
};
#endif

#ifndef SOAP_TYPE_ns1__KeyValueObject
#define SOAP_TYPE_ns1__KeyValueObject (10)
/* ns1:KeyValueObject */
class SOAP_CMAC ns1__KeyValueObject
{
public:
	char *key;	/* required element of type xsd:string */
	char *objectId;	/* required element of type xsd:string */
	char *patientId;	/* required element of type xsd:string */
	char *value;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns1__KeyValueObject */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__KeyValueObject() : key(NULL), objectId(NULL), patientId(NULL), value(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~ns1__KeyValueObject() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ImageItem
#define SOAP_TYPE_ns1__ImageItem (12)
/* ns1:ImageItem */
class SOAP_CMAC ns1__ImageItem
{
public:
	char *base64Preview;	/* required element of type xsd:string */
	char *imageId;	/* required element of type xsd:string */
	char *imageNote;	/* required element of type xsd:string */
	char *name;	/* required element of type xsd:string */
	char *patientId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns1__ImageItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ImageItem() : base64Preview(NULL), imageId(NULL), imageNote(NULL), name(NULL), patientId(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~ns1__ImageItem() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MedicalReport
#define SOAP_TYPE_ns1__MedicalReport (13)
/* ns1:MedicalReport */
class SOAP_CMAC ns1__MedicalReport
{
public:
	class AnamnesiArray *anamnesi;	/* required element of type ArrayOfAnamnesi */
	class TherapyReportArray *currentTherapies;	/* required element of type ArrayOfTherapyReport */
	char *patientId;	/* required element of type xsd:string */
	TherapyReportArray *reports;	/* required element of type ArrayOfTherapyReport */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns1__MedicalReport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MedicalReport() : anamnesi(NULL), currentTherapies(NULL), patientId(NULL), reports(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~ns1__MedicalReport() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Anamnesi
#define SOAP_TYPE_ns1__Anamnesi (15)
/* ns1:Anamnesi */
class SOAP_CMAC ns1__Anamnesi
{
public:
	char *anamnesiId;	/* required element of type xsd:string */
	char *date;	/* required element of type xsd:string */
	char *patientId;	/* required element of type xsd:string */
	char *text;	/* required element of type xsd:string */
	char *title;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ns1__Anamnesi */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Anamnesi() : anamnesiId(NULL), date(NULL), patientId(NULL), text(NULL), title(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~ns1__Anamnesi() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TherapyReport
#define SOAP_TYPE_ns1__TherapyReport (17)
/* ns1:TherapyReport */
class SOAP_CMAC ns1__TherapyReport
{
public:
	char *objectId;	/* required element of type xsd:string */
	char *patientId;	/* required element of type xsd:string */
	char *text;	/* required element of type xsd:string */
	char *title;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns1__TherapyReport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TherapyReport() : objectId(NULL), patientId(NULL), text(NULL), title(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~ns1__TherapyReport() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SimplePatient
#define SOAP_TYPE_ns1__SimplePatient (19)
/* ns1:SimplePatient */
class SOAP_CMAC ns1__SimplePatient
{
public:
	char *city;	/* required element of type xsd:string */
	char *lastName;	/* required element of type xsd:string */
	char *name;	/* required element of type xsd:string */
	char *patientCode;	/* required element of type xsd:string */
	char *patientId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ns1__SimplePatient */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SimplePatient() : city(NULL), lastName(NULL), name(NULL), patientCode(NULL), patientId(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~ns1__SimplePatient() { }
};
#endif

#ifndef SOAP_TYPE_KeyValueObjectArray
#define SOAP_TYPE_KeyValueObjectArray (9)
/* SOAP encoded array of ns1:KeyValueObject schema type: */
class SOAP_CMAC KeyValueObjectArray
{
public:
	ns1__KeyValueObject **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_KeyValueObjectArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         KeyValueObjectArray() : __ptr(NULL), __size(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~KeyValueObjectArray() { }
};
#endif

#ifndef SOAP_TYPE_ImageItemArray
#define SOAP_TYPE_ImageItemArray (11)
/* SOAP encoded array of ns1:ImageItem schema type: */
class SOAP_CMAC ImageItemArray
{
public:
	ns1__ImageItem **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ImageItemArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ImageItemArray() : __ptr(NULL), __size(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~ImageItemArray() { }
};
#endif

#ifndef SOAP_TYPE_AnamnesiArray
#define SOAP_TYPE_AnamnesiArray (14)
/* SOAP encoded array of ns1:Anamnesi schema type: */
class SOAP_CMAC AnamnesiArray
{
public:
	ns1__Anamnesi **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_AnamnesiArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         AnamnesiArray() : __ptr(NULL), __size(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~AnamnesiArray() { }
};
#endif

#ifndef SOAP_TYPE_TherapyReportArray
#define SOAP_TYPE_TherapyReportArray (16)
/* SOAP encoded array of ns1:TherapyReport schema type: */
class SOAP_CMAC TherapyReportArray
{
public:
	ns1__TherapyReport **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_TherapyReportArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TherapyReportArray() : __ptr(NULL), __size(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~TherapyReportArray() { }
};
#endif

#ifndef SOAP_TYPE_SimplePatientArray
#define SOAP_TYPE_SimplePatientArray (18)
/* SOAP encoded array of ns1:SimplePatient schema type: */
class SOAP_CMAC SimplePatientArray
{
public:
	ns1__SimplePatient **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_SimplePatientArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         SimplePatientArray() : __ptr(NULL), __size(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~SimplePatientArray() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getPatientByIdResponse
#define SOAP_TYPE_ns1__getPatientByIdResponse (37)
/* ns1:getPatientByIdResponse */
struct ns1__getPatientByIdResponse
{
public:
	ns1__Patient *getPatientByIdReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:Patient */
};
#endif

#ifndef SOAP_TYPE_ns1__getPatientById
#define SOAP_TYPE_ns1__getPatientById (41)
/* ns1:getPatientById */
struct ns1__getPatientById
{
public:
	char *id;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns1__helloResponse
#define SOAP_TYPE_ns1__helloResponse (44)
/* ns1:helloResponse */
struct ns1__helloResponse
{
public:
	char *helloReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns1__hello
#define SOAP_TYPE_ns1__hello (45)
/* ns1:hello */
struct ns1__hello
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns1__printStringResponse
#define SOAP_TYPE_ns1__printStringResponse (47)
/* ns1:printStringResponse */
struct ns1__printStringResponse
{
public:
	char *printStringReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns1__printString
#define SOAP_TYPE_ns1__printString (48)
/* ns1:printString */
struct ns1__printString
{
public:
	char *in;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns1__saveData
#define SOAP_TYPE_ns1__saveData (51)
/* ns1:saveData */
struct ns1__saveData
{
public:
	char *patientId;	/* optional element of type xsd:string */
	char *visitCode;	/* optional element of type xsd:string */
	char *data;	/* optional element of type xsd:string */
	char *timeStamp;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns1__saveImage
#define SOAP_TYPE_ns1__saveImage (53)
/* ns1:saveImage */
struct ns1__saveImage
{
public:
	char *patientId;	/* optional element of type xsd:string */
	char *visitCode;	/* optional element of type xsd:string */
	char *base64Image;	/* optional element of type xsd:string */
	char *timeStamp;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns1__searchPatientResponse
#define SOAP_TYPE_ns1__searchPatientResponse (54)
/* ns1:searchPatientResponse */
struct ns1__searchPatientResponse
{
public:
	SimplePatientArray *searchPatientReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfSimplePatient */
};
#endif

#ifndef SOAP_TYPE_ns1__searchPatient
#define SOAP_TYPE_ns1__searchPatient (58)
/* ns1:searchPatient */
struct ns1__searchPatient
{
public:
	char *firstName;	/* optional element of type xsd:string */
	char *lastName;	/* optional element of type xsd:string */
	char *city;	/* optional element of type xsd:string */
	char *patientCode;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (59)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (60)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (62)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (64)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (65)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getPatientById(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *id, struct ns1__getPatientByIdResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__hello(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *&helloReturn);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__printString(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *in, char *&printStringReturn);

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__saveData(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *patientId, char *visitCode, char *data, char *timeStamp);

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__saveData(struct soap *soap, struct ns1__saveData *_param_2);


SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__saveImage(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *patientId, char *visitCode, char *base64Image, char *timeStamp);

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__saveImage(struct soap *soap, struct ns1__saveImage *_param_3);


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__searchPatient(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *firstName, char *lastName, char *city, char *patientCode, struct ns1__searchPatientResponse &_param_4);

#endif

/* End of soapStub.h */
