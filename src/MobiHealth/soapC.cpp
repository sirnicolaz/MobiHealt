/* soapC.cpp
   Generated by gSOAP 2.7.15 from soapProxy.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.15 2010-04-10 13:59:06 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_ns1__SimplePatient:
		return soap_in_ns1__SimplePatient(soap, NULL, NULL, "ns1:SimplePatient");
	case SOAP_TYPE_SimplePatientArray:
		return soap_in_SimplePatientArray(soap, NULL, NULL, "ns1:SimplePatient");
	case SOAP_TYPE_ns1__TherapyReport:
		return soap_in_ns1__TherapyReport(soap, NULL, NULL, "ns1:TherapyReport");
	case SOAP_TYPE_TherapyReportArray:
		return soap_in_TherapyReportArray(soap, NULL, NULL, "ns1:TherapyReport");
	case SOAP_TYPE_ns1__Anamnesi:
		return soap_in_ns1__Anamnesi(soap, NULL, NULL, "ns1:Anamnesi");
	case SOAP_TYPE_AnamnesiArray:
		return soap_in_AnamnesiArray(soap, NULL, NULL, "ns1:Anamnesi");
	case SOAP_TYPE_ns1__MedicalReport:
		return soap_in_ns1__MedicalReport(soap, NULL, NULL, "ns1:MedicalReport");
	case SOAP_TYPE_ns1__ImageItem:
		return soap_in_ns1__ImageItem(soap, NULL, NULL, "ns1:ImageItem");
	case SOAP_TYPE_ImageItemArray:
		return soap_in_ImageItemArray(soap, NULL, NULL, "ns1:ImageItem");
	case SOAP_TYPE_ns1__KeyValueObject:
		return soap_in_ns1__KeyValueObject(soap, NULL, NULL, "ns1:KeyValueObject");
	case SOAP_TYPE_KeyValueObjectArray:
		return soap_in_KeyValueObjectArray(soap, NULL, NULL, "ns1:KeyValueObject");
	case SOAP_TYPE_ns1__Anagrafica:
		return soap_in_ns1__Anagrafica(soap, NULL, NULL, "ns1:Anagrafica");
	case SOAP_TYPE_ns1__Patient:
		return soap_in_ns1__Patient(soap, NULL, NULL, "ns1:Patient");
	case SOAP_TYPE_ns1__searchPatient:
		return soap_in_ns1__searchPatient(soap, NULL, NULL, "ns1:searchPatient");
	case SOAP_TYPE_ns1__searchPatientResponse:
		return soap_in_ns1__searchPatientResponse(soap, NULL, NULL, "ns1:searchPatientResponse");
	case SOAP_TYPE_ns1__saveImage:
		return soap_in_ns1__saveImage(soap, NULL, NULL, "ns1:saveImage");
	case SOAP_TYPE_ns1__saveData:
		return soap_in_ns1__saveData(soap, NULL, NULL, "ns1:saveData");
	case SOAP_TYPE_ns1__printString:
		return soap_in_ns1__printString(soap, NULL, NULL, "ns1:printString");
	case SOAP_TYPE_ns1__printStringResponse:
		return soap_in_ns1__printStringResponse(soap, NULL, NULL, "ns1:printStringResponse");
	case SOAP_TYPE_ns1__hello:
		return soap_in_ns1__hello(soap, NULL, NULL, "ns1:hello");
	case SOAP_TYPE_ns1__helloResponse:
		return soap_in_ns1__helloResponse(soap, NULL, NULL, "ns1:helloResponse");
	case SOAP_TYPE_ns1__getPatientById:
		return soap_in_ns1__getPatientById(soap, NULL, NULL, "ns1:getPatientById");
	case SOAP_TYPE_ns1__getPatientByIdResponse:
		return soap_in_ns1__getPatientByIdResponse(soap, NULL, NULL, "ns1:getPatientByIdResponse");
	case SOAP_TYPE_PointerToSimplePatientArray:
		return soap_in_PointerToSimplePatientArray(soap, NULL, NULL, "ns1:SimplePatient");
	case SOAP_TYPE_PointerTons1__Patient:
		return soap_in_PointerTons1__Patient(soap, NULL, NULL, "ns1:Patient");
	case SOAP_TYPE_PointerToPointerTons1__SimplePatient:
		return soap_in_PointerToPointerTons1__SimplePatient(soap, NULL, NULL, "ns1:SimplePatient");
	case SOAP_TYPE_PointerTons1__SimplePatient:
		return soap_in_PointerTons1__SimplePatient(soap, NULL, NULL, "ns1:SimplePatient");
	case SOAP_TYPE_PointerToPointerTons1__TherapyReport:
		return soap_in_PointerToPointerTons1__TherapyReport(soap, NULL, NULL, "ns1:TherapyReport");
	case SOAP_TYPE_PointerTons1__TherapyReport:
		return soap_in_PointerTons1__TherapyReport(soap, NULL, NULL, "ns1:TherapyReport");
	case SOAP_TYPE_PointerToPointerTons1__Anamnesi:
		return soap_in_PointerToPointerTons1__Anamnesi(soap, NULL, NULL, "ns1:Anamnesi");
	case SOAP_TYPE_PointerTons1__Anamnesi:
		return soap_in_PointerTons1__Anamnesi(soap, NULL, NULL, "ns1:Anamnesi");
	case SOAP_TYPE_PointerToPointerTons1__ImageItem:
		return soap_in_PointerToPointerTons1__ImageItem(soap, NULL, NULL, "ns1:ImageItem");
	case SOAP_TYPE_PointerTons1__ImageItem:
		return soap_in_PointerTons1__ImageItem(soap, NULL, NULL, "ns1:ImageItem");
	case SOAP_TYPE_PointerToPointerTons1__KeyValueObject:
		return soap_in_PointerToPointerTons1__KeyValueObject(soap, NULL, NULL, "ns1:KeyValueObject");
	case SOAP_TYPE_PointerTons1__KeyValueObject:
		return soap_in_PointerTons1__KeyValueObject(soap, NULL, NULL, "ns1:KeyValueObject");
	case SOAP_TYPE_PointerToTherapyReportArray:
		return soap_in_PointerToTherapyReportArray(soap, NULL, NULL, "ns1:TherapyReport");
	case SOAP_TYPE_PointerToAnamnesiArray:
		return soap_in_PointerToAnamnesiArray(soap, NULL, NULL, "ns1:Anamnesi");
	case SOAP_TYPE_PointerTons1__MedicalReport:
		return soap_in_PointerTons1__MedicalReport(soap, NULL, NULL, "ns1:MedicalReport");
	case SOAP_TYPE_PointerToImageItemArray:
		return soap_in_PointerToImageItemArray(soap, NULL, NULL, "ns1:ImageItem");
	case SOAP_TYPE_PointerToKeyValueObjectArray:
		return soap_in_PointerToKeyValueObjectArray(soap, NULL, NULL, "ns1:KeyValueObject");
	case SOAP_TYPE_PointerTons1__Anagrafica:
		return soap_in_PointerTons1__Anagrafica(soap, NULL, NULL, "ns1:Anagrafica");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:SimplePatient"))
		{	*type = SOAP_TYPE_ns1__SimplePatient;
			return soap_in_ns1__SimplePatient(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns1:SimplePatient"))
		{	*type = SOAP_TYPE_SimplePatientArray;
			return soap_in_SimplePatientArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:TherapyReport"))
		{	*type = SOAP_TYPE_ns1__TherapyReport;
			return soap_in_ns1__TherapyReport(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns1:TherapyReport"))
		{	*type = SOAP_TYPE_TherapyReportArray;
			return soap_in_TherapyReportArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Anamnesi"))
		{	*type = SOAP_TYPE_ns1__Anamnesi;
			return soap_in_ns1__Anamnesi(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns1:Anamnesi"))
		{	*type = SOAP_TYPE_AnamnesiArray;
			return soap_in_AnamnesiArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MedicalReport"))
		{	*type = SOAP_TYPE_ns1__MedicalReport;
			return soap_in_ns1__MedicalReport(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ImageItem"))
		{	*type = SOAP_TYPE_ns1__ImageItem;
			return soap_in_ns1__ImageItem(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns1:ImageItem"))
		{	*type = SOAP_TYPE_ImageItemArray;
			return soap_in_ImageItemArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:KeyValueObject"))
		{	*type = SOAP_TYPE_ns1__KeyValueObject;
			return soap_in_ns1__KeyValueObject(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns1:KeyValueObject"))
		{	*type = SOAP_TYPE_KeyValueObjectArray;
			return soap_in_KeyValueObjectArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Anagrafica"))
		{	*type = SOAP_TYPE_ns1__Anagrafica;
			return soap_in_ns1__Anagrafica(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Patient"))
		{	*type = SOAP_TYPE_ns1__Patient;
			return soap_in_ns1__Patient(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:searchPatient"))
		{	*type = SOAP_TYPE_ns1__searchPatient;
			return soap_in_ns1__searchPatient(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:searchPatientResponse"))
		{	*type = SOAP_TYPE_ns1__searchPatientResponse;
			return soap_in_ns1__searchPatientResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:saveImage"))
		{	*type = SOAP_TYPE_ns1__saveImage;
			return soap_in_ns1__saveImage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:saveData"))
		{	*type = SOAP_TYPE_ns1__saveData;
			return soap_in_ns1__saveData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:printString"))
		{	*type = SOAP_TYPE_ns1__printString;
			return soap_in_ns1__printString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:printStringResponse"))
		{	*type = SOAP_TYPE_ns1__printStringResponse;
			return soap_in_ns1__printStringResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:hello"))
		{	*type = SOAP_TYPE_ns1__hello;
			return soap_in_ns1__hello(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:helloResponse"))
		{	*type = SOAP_TYPE_ns1__helloResponse;
			return soap_in_ns1__helloResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getPatientById"))
		{	*type = SOAP_TYPE_ns1__getPatientById;
			return soap_in_ns1__getPatientById(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getPatientByIdResponse"))
		{	*type = SOAP_TYPE_ns1__getPatientByIdResponse;
			return soap_in_ns1__getPatientByIdResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_ns1__SimplePatient:
		return ((ns1__SimplePatient *)ptr)->soap_out(soap, tag, id, "ns1:SimplePatient");
	case SOAP_TYPE_SimplePatientArray:
		return ((SimplePatientArray *)ptr)->soap_out(soap, tag, id, "ns1:SimplePatient");
	case SOAP_TYPE_ns1__TherapyReport:
		return ((ns1__TherapyReport *)ptr)->soap_out(soap, tag, id, "ns1:TherapyReport");
	case SOAP_TYPE_TherapyReportArray:
		return ((TherapyReportArray *)ptr)->soap_out(soap, tag, id, "ns1:TherapyReport");
	case SOAP_TYPE_ns1__Anamnesi:
		return ((ns1__Anamnesi *)ptr)->soap_out(soap, tag, id, "ns1:Anamnesi");
	case SOAP_TYPE_AnamnesiArray:
		return ((AnamnesiArray *)ptr)->soap_out(soap, tag, id, "ns1:Anamnesi");
	case SOAP_TYPE_ns1__MedicalReport:
		return ((ns1__MedicalReport *)ptr)->soap_out(soap, tag, id, "ns1:MedicalReport");
	case SOAP_TYPE_ns1__ImageItem:
		return ((ns1__ImageItem *)ptr)->soap_out(soap, tag, id, "ns1:ImageItem");
	case SOAP_TYPE_ImageItemArray:
		return ((ImageItemArray *)ptr)->soap_out(soap, tag, id, "ns1:ImageItem");
	case SOAP_TYPE_ns1__KeyValueObject:
		return ((ns1__KeyValueObject *)ptr)->soap_out(soap, tag, id, "ns1:KeyValueObject");
	case SOAP_TYPE_KeyValueObjectArray:
		return ((KeyValueObjectArray *)ptr)->soap_out(soap, tag, id, "ns1:KeyValueObject");
	case SOAP_TYPE_ns1__Anagrafica:
		return ((ns1__Anagrafica *)ptr)->soap_out(soap, tag, id, "ns1:Anagrafica");
	case SOAP_TYPE_ns1__Patient:
		return ((ns1__Patient *)ptr)->soap_out(soap, tag, id, "ns1:Patient");
	case SOAP_TYPE_ns1__searchPatient:
		return soap_out_ns1__searchPatient(soap, tag, id, (const struct ns1__searchPatient *)ptr, "ns1:searchPatient");
	case SOAP_TYPE_ns1__searchPatientResponse:
		return soap_out_ns1__searchPatientResponse(soap, tag, id, (const struct ns1__searchPatientResponse *)ptr, "ns1:searchPatientResponse");
	case SOAP_TYPE_ns1__saveImage:
		return soap_out_ns1__saveImage(soap, tag, id, (const struct ns1__saveImage *)ptr, "ns1:saveImage");
	case SOAP_TYPE_ns1__saveData:
		return soap_out_ns1__saveData(soap, tag, id, (const struct ns1__saveData *)ptr, "ns1:saveData");
	case SOAP_TYPE_ns1__printString:
		return soap_out_ns1__printString(soap, tag, id, (const struct ns1__printString *)ptr, "ns1:printString");
	case SOAP_TYPE_ns1__printStringResponse:
		return soap_out_ns1__printStringResponse(soap, tag, id, (const struct ns1__printStringResponse *)ptr, "ns1:printStringResponse");
	case SOAP_TYPE_ns1__hello:
		return soap_out_ns1__hello(soap, tag, id, (const struct ns1__hello *)ptr, "ns1:hello");
	case SOAP_TYPE_ns1__helloResponse:
		return soap_out_ns1__helloResponse(soap, tag, id, (const struct ns1__helloResponse *)ptr, "ns1:helloResponse");
	case SOAP_TYPE_ns1__getPatientById:
		return soap_out_ns1__getPatientById(soap, tag, id, (const struct ns1__getPatientById *)ptr, "ns1:getPatientById");
	case SOAP_TYPE_ns1__getPatientByIdResponse:
		return soap_out_ns1__getPatientByIdResponse(soap, tag, id, (const struct ns1__getPatientByIdResponse *)ptr, "ns1:getPatientByIdResponse");
	case SOAP_TYPE_PointerToSimplePatientArray:
		return soap_out_PointerToSimplePatientArray(soap, tag, id, (SimplePatientArray *const*)ptr, "ns1:SimplePatient");
	case SOAP_TYPE_PointerTons1__Patient:
		return soap_out_PointerTons1__Patient(soap, tag, id, (ns1__Patient *const*)ptr, "ns1:Patient");
	case SOAP_TYPE_PointerToPointerTons1__SimplePatient:
		return soap_out_PointerToPointerTons1__SimplePatient(soap, tag, id, (ns1__SimplePatient **const*)ptr, "ns1:SimplePatient");
	case SOAP_TYPE_PointerTons1__SimplePatient:
		return soap_out_PointerTons1__SimplePatient(soap, tag, id, (ns1__SimplePatient *const*)ptr, "ns1:SimplePatient");
	case SOAP_TYPE_PointerToPointerTons1__TherapyReport:
		return soap_out_PointerToPointerTons1__TherapyReport(soap, tag, id, (ns1__TherapyReport **const*)ptr, "ns1:TherapyReport");
	case SOAP_TYPE_PointerTons1__TherapyReport:
		return soap_out_PointerTons1__TherapyReport(soap, tag, id, (ns1__TherapyReport *const*)ptr, "ns1:TherapyReport");
	case SOAP_TYPE_PointerToPointerTons1__Anamnesi:
		return soap_out_PointerToPointerTons1__Anamnesi(soap, tag, id, (ns1__Anamnesi **const*)ptr, "ns1:Anamnesi");
	case SOAP_TYPE_PointerTons1__Anamnesi:
		return soap_out_PointerTons1__Anamnesi(soap, tag, id, (ns1__Anamnesi *const*)ptr, "ns1:Anamnesi");
	case SOAP_TYPE_PointerToPointerTons1__ImageItem:
		return soap_out_PointerToPointerTons1__ImageItem(soap, tag, id, (ns1__ImageItem **const*)ptr, "ns1:ImageItem");
	case SOAP_TYPE_PointerTons1__ImageItem:
		return soap_out_PointerTons1__ImageItem(soap, tag, id, (ns1__ImageItem *const*)ptr, "ns1:ImageItem");
	case SOAP_TYPE_PointerToPointerTons1__KeyValueObject:
		return soap_out_PointerToPointerTons1__KeyValueObject(soap, tag, id, (ns1__KeyValueObject **const*)ptr, "ns1:KeyValueObject");
	case SOAP_TYPE_PointerTons1__KeyValueObject:
		return soap_out_PointerTons1__KeyValueObject(soap, tag, id, (ns1__KeyValueObject *const*)ptr, "ns1:KeyValueObject");
	case SOAP_TYPE_PointerToTherapyReportArray:
		return soap_out_PointerToTherapyReportArray(soap, tag, id, (TherapyReportArray *const*)ptr, "ns1:TherapyReport");
	case SOAP_TYPE_PointerToAnamnesiArray:
		return soap_out_PointerToAnamnesiArray(soap, tag, id, (AnamnesiArray *const*)ptr, "ns1:Anamnesi");
	case SOAP_TYPE_PointerTons1__MedicalReport:
		return soap_out_PointerTons1__MedicalReport(soap, tag, id, (ns1__MedicalReport *const*)ptr, "ns1:MedicalReport");
	case SOAP_TYPE_PointerToImageItemArray:
		return soap_out_PointerToImageItemArray(soap, tag, id, (ImageItemArray *const*)ptr, "ns1:ImageItem");
	case SOAP_TYPE_PointerToKeyValueObjectArray:
		return soap_out_PointerToKeyValueObjectArray(soap, tag, id, (KeyValueObjectArray *const*)ptr, "ns1:KeyValueObject");
	case SOAP_TYPE_PointerTons1__Anagrafica:
		return soap_out_PointerTons1__Anagrafica(soap, tag, id, (ns1__Anagrafica *const*)ptr, "ns1:Anagrafica");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns1__SimplePatient:
		((ns1__SimplePatient *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SimplePatientArray:
		((SimplePatientArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__TherapyReport:
		((ns1__TherapyReport *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_TherapyReportArray:
		((TherapyReportArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Anamnesi:
		((ns1__Anamnesi *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_AnamnesiArray:
		((AnamnesiArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__MedicalReport:
		((ns1__MedicalReport *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ImageItem:
		((ns1__ImageItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ImageItemArray:
		((ImageItemArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__KeyValueObject:
		((ns1__KeyValueObject *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_KeyValueObjectArray:
		((KeyValueObjectArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Anagrafica:
		((ns1__Anagrafica *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Patient:
		((ns1__Patient *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__searchPatient:
		soap_serialize_ns1__searchPatient(soap, (const struct ns1__searchPatient *)ptr);
		break;
	case SOAP_TYPE_ns1__searchPatientResponse:
		soap_serialize_ns1__searchPatientResponse(soap, (const struct ns1__searchPatientResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__saveImage:
		soap_serialize_ns1__saveImage(soap, (const struct ns1__saveImage *)ptr);
		break;
	case SOAP_TYPE_ns1__saveData:
		soap_serialize_ns1__saveData(soap, (const struct ns1__saveData *)ptr);
		break;
	case SOAP_TYPE_ns1__printString:
		soap_serialize_ns1__printString(soap, (const struct ns1__printString *)ptr);
		break;
	case SOAP_TYPE_ns1__printStringResponse:
		soap_serialize_ns1__printStringResponse(soap, (const struct ns1__printStringResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__hello:
		soap_serialize_ns1__hello(soap, (const struct ns1__hello *)ptr);
		break;
	case SOAP_TYPE_ns1__helloResponse:
		soap_serialize_ns1__helloResponse(soap, (const struct ns1__helloResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__getPatientById:
		soap_serialize_ns1__getPatientById(soap, (const struct ns1__getPatientById *)ptr);
		break;
	case SOAP_TYPE_ns1__getPatientByIdResponse:
		soap_serialize_ns1__getPatientByIdResponse(soap, (const struct ns1__getPatientByIdResponse *)ptr);
		break;
	case SOAP_TYPE_PointerToSimplePatientArray:
		soap_serialize_PointerToSimplePatientArray(soap, (SimplePatientArray *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Patient:
		soap_serialize_PointerTons1__Patient(soap, (ns1__Patient *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__SimplePatient:
		soap_serialize_PointerToPointerTons1__SimplePatient(soap, (ns1__SimplePatient **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__SimplePatient:
		soap_serialize_PointerTons1__SimplePatient(soap, (ns1__SimplePatient *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__TherapyReport:
		soap_serialize_PointerToPointerTons1__TherapyReport(soap, (ns1__TherapyReport **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__TherapyReport:
		soap_serialize_PointerTons1__TherapyReport(soap, (ns1__TherapyReport *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__Anamnesi:
		soap_serialize_PointerToPointerTons1__Anamnesi(soap, (ns1__Anamnesi **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Anamnesi:
		soap_serialize_PointerTons1__Anamnesi(soap, (ns1__Anamnesi *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__ImageItem:
		soap_serialize_PointerToPointerTons1__ImageItem(soap, (ns1__ImageItem **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ImageItem:
		soap_serialize_PointerTons1__ImageItem(soap, (ns1__ImageItem *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__KeyValueObject:
		soap_serialize_PointerToPointerTons1__KeyValueObject(soap, (ns1__KeyValueObject **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__KeyValueObject:
		soap_serialize_PointerTons1__KeyValueObject(soap, (ns1__KeyValueObject *const*)ptr);
		break;
	case SOAP_TYPE_PointerToTherapyReportArray:
		soap_serialize_PointerToTherapyReportArray(soap, (TherapyReportArray *const*)ptr);
		break;
	case SOAP_TYPE_PointerToAnamnesiArray:
		soap_serialize_PointerToAnamnesiArray(soap, (AnamnesiArray *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__MedicalReport:
		soap_serialize_PointerTons1__MedicalReport(soap, (ns1__MedicalReport *const*)ptr);
		break;
	case SOAP_TYPE_PointerToImageItemArray:
		soap_serialize_PointerToImageItemArray(soap, (ImageItemArray *const*)ptr);
		break;
	case SOAP_TYPE_PointerToKeyValueObjectArray:
		soap_serialize_PointerToKeyValueObjectArray(soap, (KeyValueObjectArray *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Anagrafica:
		soap_serialize_PointerTons1__Anagrafica(soap, (ns1__Anagrafica *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_ns1__Patient:
		return (void*)soap_instantiate_ns1__Patient(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Anagrafica:
		return (void*)soap_instantiate_ns1__Anagrafica(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__KeyValueObject:
		return (void*)soap_instantiate_ns1__KeyValueObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ImageItem:
		return (void*)soap_instantiate_ns1__ImageItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__MedicalReport:
		return (void*)soap_instantiate_ns1__MedicalReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Anamnesi:
		return (void*)soap_instantiate_ns1__Anamnesi(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__TherapyReport:
		return (void*)soap_instantiate_ns1__TherapyReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__SimplePatient:
		return (void*)soap_instantiate_ns1__SimplePatient(soap, -1, type, arrayType, n);
	case SOAP_TYPE_KeyValueObjectArray:
		return (void*)soap_instantiate_KeyValueObjectArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ImageItemArray:
		return (void*)soap_instantiate_ImageItemArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_AnamnesiArray:
		return (void*)soap_instantiate_AnamnesiArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_TherapyReportArray:
		return (void*)soap_instantiate_TherapyReportArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SimplePatientArray:
		return (void*)soap_instantiate_SimplePatientArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getPatientByIdResponse:
		return (void*)soap_instantiate_ns1__getPatientByIdResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getPatientById:
		return (void*)soap_instantiate_ns1__getPatientById(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__helloResponse:
		return (void*)soap_instantiate_ns1__helloResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__hello:
		return (void*)soap_instantiate_ns1__hello(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__printStringResponse:
		return (void*)soap_instantiate_ns1__printStringResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__printString:
		return (void*)soap_instantiate_ns1__printString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__saveData:
		return (void*)soap_instantiate_ns1__saveData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__saveImage:
		return (void*)soap_instantiate_ns1__saveImage(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__searchPatientResponse:
		return (void*)soap_instantiate_ns1__searchPatientResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__searchPatient:
		return (void*)soap_instantiate_ns1__searchPatient(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns1__Patient:
		if (p->size < 0)
			delete (ns1__Patient*)p->ptr;
		else
			delete[] (ns1__Patient*)p->ptr;
		break;
	case SOAP_TYPE_ns1__Anagrafica:
		if (p->size < 0)
			delete (ns1__Anagrafica*)p->ptr;
		else
			delete[] (ns1__Anagrafica*)p->ptr;
		break;
	case SOAP_TYPE_ns1__KeyValueObject:
		if (p->size < 0)
			delete (ns1__KeyValueObject*)p->ptr;
		else
			delete[] (ns1__KeyValueObject*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ImageItem:
		if (p->size < 0)
			delete (ns1__ImageItem*)p->ptr;
		else
			delete[] (ns1__ImageItem*)p->ptr;
		break;
	case SOAP_TYPE_ns1__MedicalReport:
		if (p->size < 0)
			delete (ns1__MedicalReport*)p->ptr;
		else
			delete[] (ns1__MedicalReport*)p->ptr;
		break;
	case SOAP_TYPE_ns1__Anamnesi:
		if (p->size < 0)
			delete (ns1__Anamnesi*)p->ptr;
		else
			delete[] (ns1__Anamnesi*)p->ptr;
		break;
	case SOAP_TYPE_ns1__TherapyReport:
		if (p->size < 0)
			delete (ns1__TherapyReport*)p->ptr;
		else
			delete[] (ns1__TherapyReport*)p->ptr;
		break;
	case SOAP_TYPE_ns1__SimplePatient:
		if (p->size < 0)
			delete (ns1__SimplePatient*)p->ptr;
		else
			delete[] (ns1__SimplePatient*)p->ptr;
		break;
	case SOAP_TYPE_KeyValueObjectArray:
		if (p->size < 0)
			delete (KeyValueObjectArray*)p->ptr;
		else
			delete[] (KeyValueObjectArray*)p->ptr;
		break;
	case SOAP_TYPE_ImageItemArray:
		if (p->size < 0)
			delete (ImageItemArray*)p->ptr;
		else
			delete[] (ImageItemArray*)p->ptr;
		break;
	case SOAP_TYPE_AnamnesiArray:
		if (p->size < 0)
			delete (AnamnesiArray*)p->ptr;
		else
			delete[] (AnamnesiArray*)p->ptr;
		break;
	case SOAP_TYPE_TherapyReportArray:
		if (p->size < 0)
			delete (TherapyReportArray*)p->ptr;
		else
			delete[] (TherapyReportArray*)p->ptr;
		break;
	case SOAP_TYPE_SimplePatientArray:
		if (p->size < 0)
			delete (SimplePatientArray*)p->ptr;
		else
			delete[] (SimplePatientArray*)p->ptr;
		break;
	case SOAP_TYPE_ns1__getPatientByIdResponse:
		if (p->size < 0)
			delete (struct ns1__getPatientByIdResponse*)p->ptr;
		else
			delete[] (struct ns1__getPatientByIdResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__getPatientById:
		if (p->size < 0)
			delete (struct ns1__getPatientById*)p->ptr;
		else
			delete[] (struct ns1__getPatientById*)p->ptr;
		break;
	case SOAP_TYPE_ns1__helloResponse:
		if (p->size < 0)
			delete (struct ns1__helloResponse*)p->ptr;
		else
			delete[] (struct ns1__helloResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__hello:
		if (p->size < 0)
			delete (struct ns1__hello*)p->ptr;
		else
			delete[] (struct ns1__hello*)p->ptr;
		break;
	case SOAP_TYPE_ns1__printStringResponse:
		if (p->size < 0)
			delete (struct ns1__printStringResponse*)p->ptr;
		else
			delete[] (struct ns1__printStringResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__printString:
		if (p->size < 0)
			delete (struct ns1__printString*)p->ptr;
		else
			delete[] (struct ns1__printString*)p->ptr;
		break;
	case SOAP_TYPE_ns1__saveData:
		if (p->size < 0)
			delete (struct ns1__saveData*)p->ptr;
		else
			delete[] (struct ns1__saveData*)p->ptr;
		break;
	case SOAP_TYPE_ns1__saveImage:
		if (p->size < 0)
			delete (struct ns1__saveImage*)p->ptr;
		else
			delete[] (struct ns1__saveImage*)p->ptr;
		break;
	case SOAP_TYPE_ns1__searchPatientResponse:
		if (p->size < 0)
			delete (struct ns1__searchPatientResponse*)p->ptr;
		else
			delete[] (struct ns1__searchPatientResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__searchPatient:
		if (p->size < 0)
			delete (struct ns1__searchPatient*)p->ptr;
		else
			delete[] (struct ns1__searchPatient*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__SimplePatient::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__SimplePatient::city);
	soap_default_string(soap, &this->ns1__SimplePatient::lastName);
	soap_default_string(soap, &this->ns1__SimplePatient::name);
	soap_default_string(soap, &this->ns1__SimplePatient::patientCode);
	soap_default_string(soap, &this->ns1__SimplePatient::patientId);
	/* transient soap skipped */
}

void ns1__SimplePatient::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__SimplePatient::city);
	soap_serialize_string(soap, &this->ns1__SimplePatient::lastName);
	soap_serialize_string(soap, &this->ns1__SimplePatient::name);
	soap_serialize_string(soap, &this->ns1__SimplePatient::patientCode);
	soap_serialize_string(soap, &this->ns1__SimplePatient::patientId);
	/* transient soap skipped */
}

int ns1__SimplePatient::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__SimplePatient(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SimplePatient(struct soap *soap, const char *tag, int id, const ns1__SimplePatient *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__SimplePatient), type))
		return soap->error;
	if (soap_out_string(soap, "city", -1, &(a->ns1__SimplePatient::city), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "lastName", -1, &(a->ns1__SimplePatient::lastName), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "name", -1, &(a->ns1__SimplePatient::name), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "patientCode", -1, &(a->ns1__SimplePatient::patientCode), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "patientId", -1, &(a->ns1__SimplePatient::patientId), "xsd:string"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__SimplePatient::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__SimplePatient(soap, tag, this, type);
}

SOAP_FMAC3 ns1__SimplePatient * SOAP_FMAC4 soap_in_ns1__SimplePatient(struct soap *soap, const char *tag, ns1__SimplePatient *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__SimplePatient *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__SimplePatient, sizeof(ns1__SimplePatient), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__SimplePatient)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__SimplePatient *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_city1 = 1;
	size_t soap_flag_lastName1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_patientCode1 = 1;
	size_t soap_flag_patientId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_city1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "city", &(a->ns1__SimplePatient::city), "xsd:string"))
				{	soap_flag_city1--;
					continue;
				}
			if (soap_flag_lastName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "lastName", &(a->ns1__SimplePatient::lastName), "xsd:string"))
				{	soap_flag_lastName1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "name", &(a->ns1__SimplePatient::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_patientCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "patientCode", &(a->ns1__SimplePatient::patientCode), "xsd:string"))
				{	soap_flag_patientCode1--;
					continue;
				}
			if (soap_flag_patientId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "patientId", &(a->ns1__SimplePatient::patientId), "xsd:string"))
				{	soap_flag_patientId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__SimplePatient *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__SimplePatient, 0, sizeof(ns1__SimplePatient), 0, soap_copy_ns1__SimplePatient);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_city1 > 0 || soap_flag_lastName1 > 0 || soap_flag_name1 > 0 || soap_flag_patientCode1 > 0 || soap_flag_patientId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__SimplePatient::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__SimplePatient);
	if (this->soap_out(soap, tag?tag:"ns1:SimplePatient", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__SimplePatient::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__SimplePatient(soap, this, tag, type);
}

SOAP_FMAC3 ns1__SimplePatient * SOAP_FMAC4 soap_get_ns1__SimplePatient(struct soap *soap, ns1__SimplePatient *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SimplePatient(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__SimplePatient * SOAP_FMAC2 soap_instantiate_ns1__SimplePatient(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__SimplePatient(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__SimplePatient, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns1__SimplePatient);
		if (size)
			*size = sizeof(ns1__SimplePatient);
		((ns1__SimplePatient*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns1__SimplePatient[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__SimplePatient);
		for (int i = 0; i < n; i++)
			((ns1__SimplePatient*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__SimplePatient*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__SimplePatient(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__SimplePatient %p -> %p\n", q, p));
	*(ns1__SimplePatient*)p = *(ns1__SimplePatient*)q;
}

void SimplePatientArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
}

void SimplePatientArray::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_SimplePatientArray))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerTons1__SimplePatient(soap, this->__ptr + i);
		}
}

int SimplePatientArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_SimplePatientArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SimplePatientArray(struct soap *soap, const char *tag, int id, const SimplePatientArray *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptr ? soap_putsize(soap, "ns1:SimplePatient", a->__size) : NULL;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_SimplePatientArray);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons1__SimplePatient(soap, "item", -1, &a->__ptr[i], "ns1:SimplePatient");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *SimplePatientArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SimplePatientArray(soap, tag, this, type);
}

SOAP_FMAC3 SimplePatientArray * SOAP_FMAC4 soap_in_SimplePatientArray(struct soap *soap, const char *tag, SimplePatientArray *a, const char *type)
{	int i, j;
	ns1__SimplePatient **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (SimplePatientArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SimplePatientArray, sizeof(SimplePatientArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (ns1__SimplePatient **)soap_malloc(soap, sizeof(ns1__SimplePatient *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons1__SimplePatient(soap, NULL, a->__ptr + i, "ns1:SimplePatient"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (ns1__SimplePatient **)soap_push_block(soap, NULL, sizeof(ns1__SimplePatient *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerTons1__SimplePatient(soap, NULL, p, "ns1:SimplePatient"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptr = (ns1__SimplePatient **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, NULL, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SimplePatientArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SimplePatientArray, 0, sizeof(SimplePatientArray), 0, soap_copy_SimplePatientArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int SimplePatientArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_SimplePatientArray);
	if (this->soap_out(soap, tag?tag:"SOAP-ENC:Array", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *SimplePatientArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SimplePatientArray(soap, this, tag, type);
}

SOAP_FMAC3 SimplePatientArray * SOAP_FMAC4 soap_get_SimplePatientArray(struct soap *soap, SimplePatientArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_SimplePatientArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 SimplePatientArray * SOAP_FMAC2 soap_instantiate_SimplePatientArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SimplePatientArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SimplePatientArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (SimplePatientArray);
		if (size)
			*size = sizeof(SimplePatientArray);
		((SimplePatientArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (SimplePatientArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(SimplePatientArray);
		for (int i = 0; i < n; i++)
			((SimplePatientArray*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SimplePatientArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SimplePatientArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SimplePatientArray %p -> %p\n", q, p));
	*(SimplePatientArray*)p = *(SimplePatientArray*)q;
}

void ns1__TherapyReport::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__TherapyReport::objectId);
	soap_default_string(soap, &this->ns1__TherapyReport::patientId);
	soap_default_string(soap, &this->ns1__TherapyReport::text);
	soap_default_string(soap, &this->ns1__TherapyReport::title);
	/* transient soap skipped */
}

void ns1__TherapyReport::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__TherapyReport::objectId);
	soap_serialize_string(soap, &this->ns1__TherapyReport::patientId);
	soap_serialize_string(soap, &this->ns1__TherapyReport::text);
	soap_serialize_string(soap, &this->ns1__TherapyReport::title);
	/* transient soap skipped */
}

int ns1__TherapyReport::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__TherapyReport(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TherapyReport(struct soap *soap, const char *tag, int id, const ns1__TherapyReport *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__TherapyReport), type))
		return soap->error;
	if (soap_out_string(soap, "objectId", -1, &(a->ns1__TherapyReport::objectId), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "patientId", -1, &(a->ns1__TherapyReport::patientId), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "text", -1, &(a->ns1__TherapyReport::text), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "title", -1, &(a->ns1__TherapyReport::title), "xsd:string"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__TherapyReport::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__TherapyReport(soap, tag, this, type);
}

SOAP_FMAC3 ns1__TherapyReport * SOAP_FMAC4 soap_in_ns1__TherapyReport(struct soap *soap, const char *tag, ns1__TherapyReport *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__TherapyReport *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__TherapyReport, sizeof(ns1__TherapyReport), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__TherapyReport)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__TherapyReport *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_objectId1 = 1;
	size_t soap_flag_patientId1 = 1;
	size_t soap_flag_text1 = 1;
	size_t soap_flag_title1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_objectId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "objectId", &(a->ns1__TherapyReport::objectId), "xsd:string"))
				{	soap_flag_objectId1--;
					continue;
				}
			if (soap_flag_patientId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "patientId", &(a->ns1__TherapyReport::patientId), "xsd:string"))
				{	soap_flag_patientId1--;
					continue;
				}
			if (soap_flag_text1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "text", &(a->ns1__TherapyReport::text), "xsd:string"))
				{	soap_flag_text1--;
					continue;
				}
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "title", &(a->ns1__TherapyReport::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__TherapyReport *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__TherapyReport, 0, sizeof(ns1__TherapyReport), 0, soap_copy_ns1__TherapyReport);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_objectId1 > 0 || soap_flag_patientId1 > 0 || soap_flag_text1 > 0 || soap_flag_title1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__TherapyReport::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__TherapyReport);
	if (this->soap_out(soap, tag?tag:"ns1:TherapyReport", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__TherapyReport::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__TherapyReport(soap, this, tag, type);
}

SOAP_FMAC3 ns1__TherapyReport * SOAP_FMAC4 soap_get_ns1__TherapyReport(struct soap *soap, ns1__TherapyReport *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__TherapyReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__TherapyReport * SOAP_FMAC2 soap_instantiate_ns1__TherapyReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__TherapyReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__TherapyReport, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns1__TherapyReport);
		if (size)
			*size = sizeof(ns1__TherapyReport);
		((ns1__TherapyReport*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns1__TherapyReport[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__TherapyReport);
		for (int i = 0; i < n; i++)
			((ns1__TherapyReport*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__TherapyReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__TherapyReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__TherapyReport %p -> %p\n", q, p));
	*(ns1__TherapyReport*)p = *(ns1__TherapyReport*)q;
}

void TherapyReportArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
}

void TherapyReportArray::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_TherapyReportArray))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerTons1__TherapyReport(soap, this->__ptr + i);
		}
}

int TherapyReportArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_TherapyReportArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_TherapyReportArray(struct soap *soap, const char *tag, int id, const TherapyReportArray *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptr ? soap_putsize(soap, "ns1:TherapyReport", a->__size) : NULL;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_TherapyReportArray);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons1__TherapyReport(soap, "item", -1, &a->__ptr[i], "ns1:TherapyReport");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *TherapyReportArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_TherapyReportArray(soap, tag, this, type);
}

SOAP_FMAC3 TherapyReportArray * SOAP_FMAC4 soap_in_TherapyReportArray(struct soap *soap, const char *tag, TherapyReportArray *a, const char *type)
{	int i, j;
	ns1__TherapyReport **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (TherapyReportArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_TherapyReportArray, sizeof(TherapyReportArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (ns1__TherapyReport **)soap_malloc(soap, sizeof(ns1__TherapyReport *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons1__TherapyReport(soap, NULL, a->__ptr + i, "ns1:TherapyReport"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (ns1__TherapyReport **)soap_push_block(soap, NULL, sizeof(ns1__TherapyReport *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerTons1__TherapyReport(soap, NULL, p, "ns1:TherapyReport"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptr = (ns1__TherapyReport **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, NULL, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (TherapyReportArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_TherapyReportArray, 0, sizeof(TherapyReportArray), 0, soap_copy_TherapyReportArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int TherapyReportArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_TherapyReportArray);
	if (this->soap_out(soap, tag?tag:"SOAP-ENC:Array", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *TherapyReportArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_TherapyReportArray(soap, this, tag, type);
}

SOAP_FMAC3 TherapyReportArray * SOAP_FMAC4 soap_get_TherapyReportArray(struct soap *soap, TherapyReportArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_TherapyReportArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 TherapyReportArray * SOAP_FMAC2 soap_instantiate_TherapyReportArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_TherapyReportArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_TherapyReportArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (TherapyReportArray);
		if (size)
			*size = sizeof(TherapyReportArray);
		((TherapyReportArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (TherapyReportArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(TherapyReportArray);
		for (int i = 0; i < n; i++)
			((TherapyReportArray*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (TherapyReportArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_TherapyReportArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying TherapyReportArray %p -> %p\n", q, p));
	*(TherapyReportArray*)p = *(TherapyReportArray*)q;
}

void ns1__Anamnesi::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__Anamnesi::anamnesiId);
	soap_default_string(soap, &this->ns1__Anamnesi::date);
	soap_default_string(soap, &this->ns1__Anamnesi::patientId);
	soap_default_string(soap, &this->ns1__Anamnesi::text);
	soap_default_string(soap, &this->ns1__Anamnesi::title);
	/* transient soap skipped */
}

void ns1__Anamnesi::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__Anamnesi::anamnesiId);
	soap_serialize_string(soap, &this->ns1__Anamnesi::date);
	soap_serialize_string(soap, &this->ns1__Anamnesi::patientId);
	soap_serialize_string(soap, &this->ns1__Anamnesi::text);
	soap_serialize_string(soap, &this->ns1__Anamnesi::title);
	/* transient soap skipped */
}

int ns1__Anamnesi::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Anamnesi(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Anamnesi(struct soap *soap, const char *tag, int id, const ns1__Anamnesi *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Anamnesi), type))
		return soap->error;
	if (soap_out_string(soap, "anamnesiId", -1, &(a->ns1__Anamnesi::anamnesiId), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "date", -1, &(a->ns1__Anamnesi::date), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "patientId", -1, &(a->ns1__Anamnesi::patientId), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "text", -1, &(a->ns1__Anamnesi::text), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "title", -1, &(a->ns1__Anamnesi::title), "xsd:string"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Anamnesi::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Anamnesi(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Anamnesi * SOAP_FMAC4 soap_in_ns1__Anamnesi(struct soap *soap, const char *tag, ns1__Anamnesi *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Anamnesi *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Anamnesi, sizeof(ns1__Anamnesi), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Anamnesi)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Anamnesi *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_anamnesiId1 = 1;
	size_t soap_flag_date1 = 1;
	size_t soap_flag_patientId1 = 1;
	size_t soap_flag_text1 = 1;
	size_t soap_flag_title1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_anamnesiId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "anamnesiId", &(a->ns1__Anamnesi::anamnesiId), "xsd:string"))
				{	soap_flag_anamnesiId1--;
					continue;
				}
			if (soap_flag_date1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "date", &(a->ns1__Anamnesi::date), "xsd:string"))
				{	soap_flag_date1--;
					continue;
				}
			if (soap_flag_patientId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "patientId", &(a->ns1__Anamnesi::patientId), "xsd:string"))
				{	soap_flag_patientId1--;
					continue;
				}
			if (soap_flag_text1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "text", &(a->ns1__Anamnesi::text), "xsd:string"))
				{	soap_flag_text1--;
					continue;
				}
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "title", &(a->ns1__Anamnesi::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Anamnesi *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Anamnesi, 0, sizeof(ns1__Anamnesi), 0, soap_copy_ns1__Anamnesi);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_anamnesiId1 > 0 || soap_flag_date1 > 0 || soap_flag_patientId1 > 0 || soap_flag_text1 > 0 || soap_flag_title1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__Anamnesi::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Anamnesi);
	if (this->soap_out(soap, tag?tag:"ns1:Anamnesi", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Anamnesi::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Anamnesi(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Anamnesi * SOAP_FMAC4 soap_get_ns1__Anamnesi(struct soap *soap, ns1__Anamnesi *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Anamnesi(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__Anamnesi * SOAP_FMAC2 soap_instantiate_ns1__Anamnesi(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Anamnesi(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Anamnesi, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns1__Anamnesi);
		if (size)
			*size = sizeof(ns1__Anamnesi);
		((ns1__Anamnesi*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns1__Anamnesi[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__Anamnesi);
		for (int i = 0; i < n; i++)
			((ns1__Anamnesi*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__Anamnesi*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Anamnesi(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Anamnesi %p -> %p\n", q, p));
	*(ns1__Anamnesi*)p = *(ns1__Anamnesi*)q;
}

void AnamnesiArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
}

void AnamnesiArray::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_AnamnesiArray))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerTons1__Anamnesi(soap, this->__ptr + i);
		}
}

int AnamnesiArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_AnamnesiArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_AnamnesiArray(struct soap *soap, const char *tag, int id, const AnamnesiArray *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptr ? soap_putsize(soap, "ns1:Anamnesi", a->__size) : NULL;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_AnamnesiArray);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons1__Anamnesi(soap, "item", -1, &a->__ptr[i], "ns1:Anamnesi");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *AnamnesiArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_AnamnesiArray(soap, tag, this, type);
}

SOAP_FMAC3 AnamnesiArray * SOAP_FMAC4 soap_in_AnamnesiArray(struct soap *soap, const char *tag, AnamnesiArray *a, const char *type)
{	int i, j;
	ns1__Anamnesi **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (AnamnesiArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_AnamnesiArray, sizeof(AnamnesiArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (ns1__Anamnesi **)soap_malloc(soap, sizeof(ns1__Anamnesi *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons1__Anamnesi(soap, NULL, a->__ptr + i, "ns1:Anamnesi"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (ns1__Anamnesi **)soap_push_block(soap, NULL, sizeof(ns1__Anamnesi *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerTons1__Anamnesi(soap, NULL, p, "ns1:Anamnesi"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptr = (ns1__Anamnesi **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, NULL, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (AnamnesiArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_AnamnesiArray, 0, sizeof(AnamnesiArray), 0, soap_copy_AnamnesiArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int AnamnesiArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_AnamnesiArray);
	if (this->soap_out(soap, tag?tag:"SOAP-ENC:Array", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *AnamnesiArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_AnamnesiArray(soap, this, tag, type);
}

SOAP_FMAC3 AnamnesiArray * SOAP_FMAC4 soap_get_AnamnesiArray(struct soap *soap, AnamnesiArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_AnamnesiArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 AnamnesiArray * SOAP_FMAC2 soap_instantiate_AnamnesiArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_AnamnesiArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_AnamnesiArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (AnamnesiArray);
		if (size)
			*size = sizeof(AnamnesiArray);
		((AnamnesiArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (AnamnesiArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(AnamnesiArray);
		for (int i = 0; i < n; i++)
			((AnamnesiArray*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (AnamnesiArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_AnamnesiArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying AnamnesiArray %p -> %p\n", q, p));
	*(AnamnesiArray*)p = *(AnamnesiArray*)q;
}

void ns1__MedicalReport::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__MedicalReport::anamnesi = NULL;
	this->ns1__MedicalReport::currentTherapies = NULL;
	soap_default_string(soap, &this->ns1__MedicalReport::patientId);
	this->ns1__MedicalReport::reports = NULL;
	/* transient soap skipped */
}

void ns1__MedicalReport::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToAnamnesiArray(soap, &this->ns1__MedicalReport::anamnesi);
	soap_serialize_PointerToTherapyReportArray(soap, &this->ns1__MedicalReport::currentTherapies);
	soap_serialize_string(soap, &this->ns1__MedicalReport::patientId);
	soap_serialize_PointerToTherapyReportArray(soap, &this->ns1__MedicalReport::reports);
	/* transient soap skipped */
}

int ns1__MedicalReport::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__MedicalReport(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MedicalReport(struct soap *soap, const char *tag, int id, const ns1__MedicalReport *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__MedicalReport), type))
		return soap->error;
	if (soap_out_PointerToAnamnesiArray(soap, "anamnesi", -1, &(a->ns1__MedicalReport::anamnesi), "ns1:Anamnesi"))
		return soap->error;
	if (soap_out_PointerToTherapyReportArray(soap, "currentTherapies", -1, &(a->ns1__MedicalReport::currentTherapies), "ns1:TherapyReport"))
		return soap->error;
	if (soap_out_string(soap, "patientId", -1, &(a->ns1__MedicalReport::patientId), "xsd:string"))
		return soap->error;
	if (soap_out_PointerToTherapyReportArray(soap, "reports", -1, &(a->ns1__MedicalReport::reports), "ns1:TherapyReport"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__MedicalReport::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__MedicalReport(soap, tag, this, type);
}

SOAP_FMAC3 ns1__MedicalReport * SOAP_FMAC4 soap_in_ns1__MedicalReport(struct soap *soap, const char *tag, ns1__MedicalReport *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__MedicalReport *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__MedicalReport, sizeof(ns1__MedicalReport), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__MedicalReport)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__MedicalReport *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_anamnesi1 = 1;
	size_t soap_flag_currentTherapies1 = 1;
	size_t soap_flag_patientId1 = 1;
	size_t soap_flag_reports1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_anamnesi1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToAnamnesiArray(soap, "anamnesi", &(a->ns1__MedicalReport::anamnesi), "ns1:Anamnesi"))
				{	soap_flag_anamnesi1--;
					continue;
				}
			if (soap_flag_currentTherapies1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToTherapyReportArray(soap, "currentTherapies", &(a->ns1__MedicalReport::currentTherapies), "ns1:TherapyReport"))
				{	soap_flag_currentTherapies1--;
					continue;
				}
			if (soap_flag_patientId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "patientId", &(a->ns1__MedicalReport::patientId), "xsd:string"))
				{	soap_flag_patientId1--;
					continue;
				}
			if (soap_flag_reports1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToTherapyReportArray(soap, "reports", &(a->ns1__MedicalReport::reports), "ns1:TherapyReport"))
				{	soap_flag_reports1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__MedicalReport *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__MedicalReport, 0, sizeof(ns1__MedicalReport), 0, soap_copy_ns1__MedicalReport);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_anamnesi1 > 0 || soap_flag_currentTherapies1 > 0 || soap_flag_patientId1 > 0 || soap_flag_reports1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__MedicalReport::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__MedicalReport);
	if (this->soap_out(soap, tag?tag:"ns1:MedicalReport", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__MedicalReport::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__MedicalReport(soap, this, tag, type);
}

SOAP_FMAC3 ns1__MedicalReport * SOAP_FMAC4 soap_get_ns1__MedicalReport(struct soap *soap, ns1__MedicalReport *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__MedicalReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__MedicalReport * SOAP_FMAC2 soap_instantiate_ns1__MedicalReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__MedicalReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__MedicalReport, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns1__MedicalReport);
		if (size)
			*size = sizeof(ns1__MedicalReport);
		((ns1__MedicalReport*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns1__MedicalReport[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__MedicalReport);
		for (int i = 0; i < n; i++)
			((ns1__MedicalReport*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__MedicalReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__MedicalReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__MedicalReport %p -> %p\n", q, p));
	*(ns1__MedicalReport*)p = *(ns1__MedicalReport*)q;
}

void ns1__ImageItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__ImageItem::base64Preview);
	soap_default_string(soap, &this->ns1__ImageItem::imageId);
	soap_default_string(soap, &this->ns1__ImageItem::imageNote);
	soap_default_string(soap, &this->ns1__ImageItem::name);
	soap_default_string(soap, &this->ns1__ImageItem::patientId);
	/* transient soap skipped */
}

void ns1__ImageItem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__ImageItem::base64Preview);
	soap_serialize_string(soap, &this->ns1__ImageItem::imageId);
	soap_serialize_string(soap, &this->ns1__ImageItem::imageNote);
	soap_serialize_string(soap, &this->ns1__ImageItem::name);
	soap_serialize_string(soap, &this->ns1__ImageItem::patientId);
	/* transient soap skipped */
}

int ns1__ImageItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ImageItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ImageItem(struct soap *soap, const char *tag, int id, const ns1__ImageItem *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ImageItem), type))
		return soap->error;
	if (soap_out_string(soap, "base64Preview", -1, &(a->ns1__ImageItem::base64Preview), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "imageId", -1, &(a->ns1__ImageItem::imageId), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "imageNote", -1, &(a->ns1__ImageItem::imageNote), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "name", -1, &(a->ns1__ImageItem::name), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "patientId", -1, &(a->ns1__ImageItem::patientId), "xsd:string"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ImageItem::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ImageItem(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ImageItem * SOAP_FMAC4 soap_in_ns1__ImageItem(struct soap *soap, const char *tag, ns1__ImageItem *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ImageItem *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ImageItem, sizeof(ns1__ImageItem), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ImageItem)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ImageItem *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_base64Preview1 = 1;
	size_t soap_flag_imageId1 = 1;
	size_t soap_flag_imageNote1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_patientId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_base64Preview1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "base64Preview", &(a->ns1__ImageItem::base64Preview), "xsd:string"))
				{	soap_flag_base64Preview1--;
					continue;
				}
			if (soap_flag_imageId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "imageId", &(a->ns1__ImageItem::imageId), "xsd:string"))
				{	soap_flag_imageId1--;
					continue;
				}
			if (soap_flag_imageNote1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "imageNote", &(a->ns1__ImageItem::imageNote), "xsd:string"))
				{	soap_flag_imageNote1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "name", &(a->ns1__ImageItem::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_patientId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "patientId", &(a->ns1__ImageItem::patientId), "xsd:string"))
				{	soap_flag_patientId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ImageItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ImageItem, 0, sizeof(ns1__ImageItem), 0, soap_copy_ns1__ImageItem);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_base64Preview1 > 0 || soap_flag_imageId1 > 0 || soap_flag_imageNote1 > 0 || soap_flag_name1 > 0 || soap_flag_patientId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__ImageItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ImageItem);
	if (this->soap_out(soap, tag?tag:"ns1:ImageItem", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ImageItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ImageItem(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ImageItem * SOAP_FMAC4 soap_get_ns1__ImageItem(struct soap *soap, ns1__ImageItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ImageItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ImageItem * SOAP_FMAC2 soap_instantiate_ns1__ImageItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ImageItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ImageItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns1__ImageItem);
		if (size)
			*size = sizeof(ns1__ImageItem);
		((ns1__ImageItem*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns1__ImageItem[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ImageItem);
		for (int i = 0; i < n; i++)
			((ns1__ImageItem*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ImageItem*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ImageItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ImageItem %p -> %p\n", q, p));
	*(ns1__ImageItem*)p = *(ns1__ImageItem*)q;
}

void ImageItemArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
}

void ImageItemArray::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_ImageItemArray))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerTons1__ImageItem(soap, this->__ptr + i);
		}
}

int ImageItemArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_ImageItemArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ImageItemArray(struct soap *soap, const char *tag, int id, const ImageItemArray *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptr ? soap_putsize(soap, "ns1:ImageItem", a->__size) : NULL;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_ImageItemArray);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons1__ImageItem(soap, "item", -1, &a->__ptr[i], "ns1:ImageItem");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *ImageItemArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ImageItemArray(soap, tag, this, type);
}

SOAP_FMAC3 ImageItemArray * SOAP_FMAC4 soap_in_ImageItemArray(struct soap *soap, const char *tag, ImageItemArray *a, const char *type)
{	int i, j;
	ns1__ImageItem **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (ImageItemArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ImageItemArray, sizeof(ImageItemArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (ns1__ImageItem **)soap_malloc(soap, sizeof(ns1__ImageItem *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons1__ImageItem(soap, NULL, a->__ptr + i, "ns1:ImageItem"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (ns1__ImageItem **)soap_push_block(soap, NULL, sizeof(ns1__ImageItem *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerTons1__ImageItem(soap, NULL, p, "ns1:ImageItem"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptr = (ns1__ImageItem **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, NULL, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ImageItemArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ImageItemArray, 0, sizeof(ImageItemArray), 0, soap_copy_ImageItemArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ImageItemArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_ImageItemArray);
	if (this->soap_out(soap, tag?tag:"SOAP-ENC:Array", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ImageItemArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ImageItemArray(soap, this, tag, type);
}

SOAP_FMAC3 ImageItemArray * SOAP_FMAC4 soap_get_ImageItemArray(struct soap *soap, ImageItemArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_ImageItemArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ImageItemArray * SOAP_FMAC2 soap_instantiate_ImageItemArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ImageItemArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ImageItemArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ImageItemArray);
		if (size)
			*size = sizeof(ImageItemArray);
		((ImageItemArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ImageItemArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ImageItemArray);
		for (int i = 0; i < n; i++)
			((ImageItemArray*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ImageItemArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ImageItemArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ImageItemArray %p -> %p\n", q, p));
	*(ImageItemArray*)p = *(ImageItemArray*)q;
}

void ns1__KeyValueObject::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__KeyValueObject::key);
	soap_default_string(soap, &this->ns1__KeyValueObject::objectId);
	soap_default_string(soap, &this->ns1__KeyValueObject::patientId);
	soap_default_string(soap, &this->ns1__KeyValueObject::value);
	/* transient soap skipped */
}

void ns1__KeyValueObject::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__KeyValueObject::key);
	soap_serialize_string(soap, &this->ns1__KeyValueObject::objectId);
	soap_serialize_string(soap, &this->ns1__KeyValueObject::patientId);
	soap_serialize_string(soap, &this->ns1__KeyValueObject::value);
	/* transient soap skipped */
}

int ns1__KeyValueObject::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__KeyValueObject(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__KeyValueObject(struct soap *soap, const char *tag, int id, const ns1__KeyValueObject *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__KeyValueObject), type))
		return soap->error;
	if (soap_out_string(soap, "key", -1, &(a->ns1__KeyValueObject::key), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "objectId", -1, &(a->ns1__KeyValueObject::objectId), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "patientId", -1, &(a->ns1__KeyValueObject::patientId), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "value", -1, &(a->ns1__KeyValueObject::value), "xsd:string"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__KeyValueObject::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__KeyValueObject(soap, tag, this, type);
}

SOAP_FMAC3 ns1__KeyValueObject * SOAP_FMAC4 soap_in_ns1__KeyValueObject(struct soap *soap, const char *tag, ns1__KeyValueObject *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__KeyValueObject *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__KeyValueObject, sizeof(ns1__KeyValueObject), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__KeyValueObject)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__KeyValueObject *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_key1 = 1;
	size_t soap_flag_objectId1 = 1;
	size_t soap_flag_patientId1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_key1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "key", &(a->ns1__KeyValueObject::key), "xsd:string"))
				{	soap_flag_key1--;
					continue;
				}
			if (soap_flag_objectId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "objectId", &(a->ns1__KeyValueObject::objectId), "xsd:string"))
				{	soap_flag_objectId1--;
					continue;
				}
			if (soap_flag_patientId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "patientId", &(a->ns1__KeyValueObject::patientId), "xsd:string"))
				{	soap_flag_patientId1--;
					continue;
				}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "value", &(a->ns1__KeyValueObject::value), "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__KeyValueObject *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__KeyValueObject, 0, sizeof(ns1__KeyValueObject), 0, soap_copy_ns1__KeyValueObject);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_key1 > 0 || soap_flag_objectId1 > 0 || soap_flag_patientId1 > 0 || soap_flag_value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__KeyValueObject::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__KeyValueObject);
	if (this->soap_out(soap, tag?tag:"ns1:KeyValueObject", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__KeyValueObject::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__KeyValueObject(soap, this, tag, type);
}

SOAP_FMAC3 ns1__KeyValueObject * SOAP_FMAC4 soap_get_ns1__KeyValueObject(struct soap *soap, ns1__KeyValueObject *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__KeyValueObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__KeyValueObject * SOAP_FMAC2 soap_instantiate_ns1__KeyValueObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__KeyValueObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__KeyValueObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns1__KeyValueObject);
		if (size)
			*size = sizeof(ns1__KeyValueObject);
		((ns1__KeyValueObject*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns1__KeyValueObject[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__KeyValueObject);
		for (int i = 0; i < n; i++)
			((ns1__KeyValueObject*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__KeyValueObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__KeyValueObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__KeyValueObject %p -> %p\n", q, p));
	*(ns1__KeyValueObject*)p = *(ns1__KeyValueObject*)q;
}

void KeyValueObjectArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
}

void KeyValueObjectArray::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_KeyValueObjectArray))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerTons1__KeyValueObject(soap, this->__ptr + i);
		}
}

int KeyValueObjectArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_KeyValueObjectArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_KeyValueObjectArray(struct soap *soap, const char *tag, int id, const KeyValueObjectArray *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptr ? soap_putsize(soap, "ns1:KeyValueObject", a->__size) : NULL;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_KeyValueObjectArray);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons1__KeyValueObject(soap, "item", -1, &a->__ptr[i], "ns1:KeyValueObject");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *KeyValueObjectArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_KeyValueObjectArray(soap, tag, this, type);
}

SOAP_FMAC3 KeyValueObjectArray * SOAP_FMAC4 soap_in_KeyValueObjectArray(struct soap *soap, const char *tag, KeyValueObjectArray *a, const char *type)
{	int i, j;
	ns1__KeyValueObject **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (KeyValueObjectArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_KeyValueObjectArray, sizeof(KeyValueObjectArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (ns1__KeyValueObject **)soap_malloc(soap, sizeof(ns1__KeyValueObject *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons1__KeyValueObject(soap, NULL, a->__ptr + i, "ns1:KeyValueObject"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (ns1__KeyValueObject **)soap_push_block(soap, NULL, sizeof(ns1__KeyValueObject *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerTons1__KeyValueObject(soap, NULL, p, "ns1:KeyValueObject"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptr = (ns1__KeyValueObject **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, NULL, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (KeyValueObjectArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_KeyValueObjectArray, 0, sizeof(KeyValueObjectArray), 0, soap_copy_KeyValueObjectArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int KeyValueObjectArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_KeyValueObjectArray);
	if (this->soap_out(soap, tag?tag:"SOAP-ENC:Array", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *KeyValueObjectArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_KeyValueObjectArray(soap, this, tag, type);
}

SOAP_FMAC3 KeyValueObjectArray * SOAP_FMAC4 soap_get_KeyValueObjectArray(struct soap *soap, KeyValueObjectArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_KeyValueObjectArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 KeyValueObjectArray * SOAP_FMAC2 soap_instantiate_KeyValueObjectArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_KeyValueObjectArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_KeyValueObjectArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (KeyValueObjectArray);
		if (size)
			*size = sizeof(KeyValueObjectArray);
		((KeyValueObjectArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (KeyValueObjectArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(KeyValueObjectArray);
		for (int i = 0; i < n; i++)
			((KeyValueObjectArray*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (KeyValueObjectArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_KeyValueObjectArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying KeyValueObjectArray %p -> %p\n", q, p));
	*(KeyValueObjectArray*)p = *(KeyValueObjectArray*)q;
}

void ns1__Anagrafica::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__Anagrafica::CF);
	soap_default_string(soap, &this->ns1__Anagrafica::GP);
	soap_default_string(soap, &this->ns1__Anagrafica::address);
	soap_default_string(soap, &this->ns1__Anagrafica::birthDate);
	soap_default_string(soap, &this->ns1__Anagrafica::birthLocation);
	soap_default_string(soap, &this->ns1__Anagrafica::cap);
	soap_default_string(soap, &this->ns1__Anagrafica::city);
	soap_default_string(soap, &this->ns1__Anagrafica::lastName);
	soap_default_string(soap, &this->ns1__Anagrafica::marital);
	soap_default_string(soap, &this->ns1__Anagrafica::name);
	soap_default_string(soap, &this->ns1__Anagrafica::patientCode);
	soap_default_string(soap, &this->ns1__Anagrafica::patientId);
	soap_default_string(soap, &this->ns1__Anagrafica::profession);
	soap_default_string(soap, &this->ns1__Anagrafica::province);
	/* transient soap skipped */
}

void ns1__Anagrafica::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__Anagrafica::CF);
	soap_serialize_string(soap, &this->ns1__Anagrafica::GP);
	soap_serialize_string(soap, &this->ns1__Anagrafica::address);
	soap_serialize_string(soap, &this->ns1__Anagrafica::birthDate);
	soap_serialize_string(soap, &this->ns1__Anagrafica::birthLocation);
	soap_serialize_string(soap, &this->ns1__Anagrafica::cap);
	soap_serialize_string(soap, &this->ns1__Anagrafica::city);
	soap_serialize_string(soap, &this->ns1__Anagrafica::lastName);
	soap_serialize_string(soap, &this->ns1__Anagrafica::marital);
	soap_serialize_string(soap, &this->ns1__Anagrafica::name);
	soap_serialize_string(soap, &this->ns1__Anagrafica::patientCode);
	soap_serialize_string(soap, &this->ns1__Anagrafica::patientId);
	soap_serialize_string(soap, &this->ns1__Anagrafica::profession);
	soap_serialize_string(soap, &this->ns1__Anagrafica::province);
	/* transient soap skipped */
}

int ns1__Anagrafica::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Anagrafica(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Anagrafica(struct soap *soap, const char *tag, int id, const ns1__Anagrafica *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Anagrafica), type))
		return soap->error;
	if (soap_out_string(soap, "CF", -1, &(a->ns1__Anagrafica::CF), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "GP", -1, &(a->ns1__Anagrafica::GP), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "address", -1, &(a->ns1__Anagrafica::address), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "birthDate", -1, &(a->ns1__Anagrafica::birthDate), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "birthLocation", -1, &(a->ns1__Anagrafica::birthLocation), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "cap", -1, &(a->ns1__Anagrafica::cap), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "city", -1, &(a->ns1__Anagrafica::city), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "lastName", -1, &(a->ns1__Anagrafica::lastName), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "marital", -1, &(a->ns1__Anagrafica::marital), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "name", -1, &(a->ns1__Anagrafica::name), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "patientCode", -1, &(a->ns1__Anagrafica::patientCode), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "patientId", -1, &(a->ns1__Anagrafica::patientId), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "profession", -1, &(a->ns1__Anagrafica::profession), "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "province", -1, &(a->ns1__Anagrafica::province), "xsd:string"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Anagrafica::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Anagrafica(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Anagrafica * SOAP_FMAC4 soap_in_ns1__Anagrafica(struct soap *soap, const char *tag, ns1__Anagrafica *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Anagrafica *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Anagrafica, sizeof(ns1__Anagrafica), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Anagrafica)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Anagrafica *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CF1 = 1;
	size_t soap_flag_GP1 = 1;
	size_t soap_flag_address1 = 1;
	size_t soap_flag_birthDate1 = 1;
	size_t soap_flag_birthLocation1 = 1;
	size_t soap_flag_cap1 = 1;
	size_t soap_flag_city1 = 1;
	size_t soap_flag_lastName1 = 1;
	size_t soap_flag_marital1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_patientCode1 = 1;
	size_t soap_flag_patientId1 = 1;
	size_t soap_flag_profession1 = 1;
	size_t soap_flag_province1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CF1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "CF", &(a->ns1__Anagrafica::CF), "xsd:string"))
				{	soap_flag_CF1--;
					continue;
				}
			if (soap_flag_GP1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "GP", &(a->ns1__Anagrafica::GP), "xsd:string"))
				{	soap_flag_GP1--;
					continue;
				}
			if (soap_flag_address1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "address", &(a->ns1__Anagrafica::address), "xsd:string"))
				{	soap_flag_address1--;
					continue;
				}
			if (soap_flag_birthDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "birthDate", &(a->ns1__Anagrafica::birthDate), "xsd:string"))
				{	soap_flag_birthDate1--;
					continue;
				}
			if (soap_flag_birthLocation1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "birthLocation", &(a->ns1__Anagrafica::birthLocation), "xsd:string"))
				{	soap_flag_birthLocation1--;
					continue;
				}
			if (soap_flag_cap1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cap", &(a->ns1__Anagrafica::cap), "xsd:string"))
				{	soap_flag_cap1--;
					continue;
				}
			if (soap_flag_city1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "city", &(a->ns1__Anagrafica::city), "xsd:string"))
				{	soap_flag_city1--;
					continue;
				}
			if (soap_flag_lastName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "lastName", &(a->ns1__Anagrafica::lastName), "xsd:string"))
				{	soap_flag_lastName1--;
					continue;
				}
			if (soap_flag_marital1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "marital", &(a->ns1__Anagrafica::marital), "xsd:string"))
				{	soap_flag_marital1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "name", &(a->ns1__Anagrafica::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_patientCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "patientCode", &(a->ns1__Anagrafica::patientCode), "xsd:string"))
				{	soap_flag_patientCode1--;
					continue;
				}
			if (soap_flag_patientId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "patientId", &(a->ns1__Anagrafica::patientId), "xsd:string"))
				{	soap_flag_patientId1--;
					continue;
				}
			if (soap_flag_profession1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "profession", &(a->ns1__Anagrafica::profession), "xsd:string"))
				{	soap_flag_profession1--;
					continue;
				}
			if (soap_flag_province1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "province", &(a->ns1__Anagrafica::province), "xsd:string"))
				{	soap_flag_province1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Anagrafica *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Anagrafica, 0, sizeof(ns1__Anagrafica), 0, soap_copy_ns1__Anagrafica);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_CF1 > 0 || soap_flag_GP1 > 0 || soap_flag_address1 > 0 || soap_flag_birthDate1 > 0 || soap_flag_birthLocation1 > 0 || soap_flag_cap1 > 0 || soap_flag_city1 > 0 || soap_flag_lastName1 > 0 || soap_flag_marital1 > 0 || soap_flag_name1 > 0 || soap_flag_patientCode1 > 0 || soap_flag_patientId1 > 0 || soap_flag_profession1 > 0 || soap_flag_province1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__Anagrafica::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Anagrafica);
	if (this->soap_out(soap, tag?tag:"ns1:Anagrafica", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Anagrafica::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Anagrafica(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Anagrafica * SOAP_FMAC4 soap_get_ns1__Anagrafica(struct soap *soap, ns1__Anagrafica *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Anagrafica(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__Anagrafica * SOAP_FMAC2 soap_instantiate_ns1__Anagrafica(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Anagrafica(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Anagrafica, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns1__Anagrafica);
		if (size)
			*size = sizeof(ns1__Anagrafica);
		((ns1__Anagrafica*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns1__Anagrafica[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__Anagrafica);
		for (int i = 0; i < n; i++)
			((ns1__Anagrafica*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__Anagrafica*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Anagrafica(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Anagrafica %p -> %p\n", q, p));
	*(ns1__Anagrafica*)p = *(ns1__Anagrafica*)q;
}

void ns1__Patient::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__Patient::anagrafica = NULL;
	this->ns1__Patient::contacts = NULL;
	this->ns1__Patient::images = NULL;
	this->ns1__Patient::medicalReport = NULL;
	this->ns1__Patient::pathologies = NULL;
	soap_default_string(soap, &this->ns1__Patient::patientId);
	this->ns1__Patient::visitHistory = NULL;
	/* transient soap skipped */
}

void ns1__Patient::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__Anagrafica(soap, &this->ns1__Patient::anagrafica);
	soap_serialize_PointerToKeyValueObjectArray(soap, &this->ns1__Patient::contacts);
	soap_serialize_PointerToImageItemArray(soap, &this->ns1__Patient::images);
	soap_serialize_PointerTons1__MedicalReport(soap, &this->ns1__Patient::medicalReport);
	soap_serialize_PointerToKeyValueObjectArray(soap, &this->ns1__Patient::pathologies);
	soap_serialize_string(soap, &this->ns1__Patient::patientId);
	soap_serialize_PointerToKeyValueObjectArray(soap, &this->ns1__Patient::visitHistory);
	/* transient soap skipped */
}

int ns1__Patient::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Patient(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Patient(struct soap *soap, const char *tag, int id, const ns1__Patient *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Patient), type))
		return soap->error;
	if (soap_out_PointerTons1__Anagrafica(soap, "anagrafica", -1, &(a->ns1__Patient::anagrafica), "ns1:Anagrafica"))
		return soap->error;
	if (soap_out_PointerToKeyValueObjectArray(soap, "contacts", -1, &(a->ns1__Patient::contacts), "ns1:KeyValueObject"))
		return soap->error;
	if (soap_out_PointerToImageItemArray(soap, "images", -1, &(a->ns1__Patient::images), "ns1:ImageItem"))
		return soap->error;
	if (soap_out_PointerTons1__MedicalReport(soap, "medicalReport", -1, &(a->ns1__Patient::medicalReport), "ns1:MedicalReport"))
		return soap->error;
	if (soap_out_PointerToKeyValueObjectArray(soap, "pathologies", -1, &(a->ns1__Patient::pathologies), "ns1:KeyValueObject"))
		return soap->error;
	if (soap_out_string(soap, "patientId", -1, &(a->ns1__Patient::patientId), "xsd:string"))
		return soap->error;
	if (soap_out_PointerToKeyValueObjectArray(soap, "visitHistory", -1, &(a->ns1__Patient::visitHistory), "ns1:KeyValueObject"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Patient::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Patient(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Patient * SOAP_FMAC4 soap_in_ns1__Patient(struct soap *soap, const char *tag, ns1__Patient *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Patient *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Patient, sizeof(ns1__Patient), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Patient)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Patient *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_anagrafica1 = 1;
	size_t soap_flag_contacts1 = 1;
	size_t soap_flag_images1 = 1;
	size_t soap_flag_medicalReport1 = 1;
	size_t soap_flag_pathologies1 = 1;
	size_t soap_flag_patientId1 = 1;
	size_t soap_flag_visitHistory1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_anagrafica1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__Anagrafica(soap, "anagrafica", &(a->ns1__Patient::anagrafica), "ns1:Anagrafica"))
				{	soap_flag_anagrafica1--;
					continue;
				}
			if (soap_flag_contacts1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToKeyValueObjectArray(soap, "contacts", &(a->ns1__Patient::contacts), "ns1:KeyValueObject"))
				{	soap_flag_contacts1--;
					continue;
				}
			if (soap_flag_images1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToImageItemArray(soap, "images", &(a->ns1__Patient::images), "ns1:ImageItem"))
				{	soap_flag_images1--;
					continue;
				}
			if (soap_flag_medicalReport1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__MedicalReport(soap, "medicalReport", &(a->ns1__Patient::medicalReport), "ns1:MedicalReport"))
				{	soap_flag_medicalReport1--;
					continue;
				}
			if (soap_flag_pathologies1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToKeyValueObjectArray(soap, "pathologies", &(a->ns1__Patient::pathologies), "ns1:KeyValueObject"))
				{	soap_flag_pathologies1--;
					continue;
				}
			if (soap_flag_patientId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "patientId", &(a->ns1__Patient::patientId), "xsd:string"))
				{	soap_flag_patientId1--;
					continue;
				}
			if (soap_flag_visitHistory1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToKeyValueObjectArray(soap, "visitHistory", &(a->ns1__Patient::visitHistory), "ns1:KeyValueObject"))
				{	soap_flag_visitHistory1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Patient *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Patient, 0, sizeof(ns1__Patient), 0, soap_copy_ns1__Patient);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_anagrafica1 > 0 || soap_flag_contacts1 > 0 || soap_flag_images1 > 0 || soap_flag_medicalReport1 > 0 || soap_flag_pathologies1 > 0 || soap_flag_patientId1 > 0 || soap_flag_visitHistory1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__Patient::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Patient);
	if (this->soap_out(soap, tag?tag:"ns1:Patient", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Patient::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Patient(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Patient * SOAP_FMAC4 soap_get_ns1__Patient(struct soap *soap, ns1__Patient *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Patient(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__Patient * SOAP_FMAC2 soap_instantiate_ns1__Patient(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Patient(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Patient, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns1__Patient);
		if (size)
			*size = sizeof(ns1__Patient);
		((ns1__Patient*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns1__Patient[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__Patient);
		for (int i = 0; i < n; i++)
			((ns1__Patient*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__Patient*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Patient(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Patient %p -> %p\n", q, p));
	*(ns1__Patient*)p = *(ns1__Patient*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, "xsd:string"))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__searchPatient(struct soap *soap, struct ns1__searchPatient *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->firstName);
	soap_default_string(soap, &a->lastName);
	soap_default_string(soap, &a->city);
	soap_default_string(soap, &a->patientCode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__searchPatient(struct soap *soap, const struct ns1__searchPatient *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->firstName);
	soap_serialize_string(soap, &a->lastName);
	soap_serialize_string(soap, &a->city);
	soap_serialize_string(soap, &a->patientCode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__searchPatient(struct soap *soap, const char *tag, int id, const struct ns1__searchPatient *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__searchPatient), type))
		return soap->error;
	if (soap_out_string(soap, "firstName", -1, &a->firstName, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "lastName", -1, &a->lastName, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "city", -1, &a->city, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "patientCode", -1, &a->patientCode, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__searchPatient * SOAP_FMAC4 soap_in_ns1__searchPatient(struct soap *soap, const char *tag, struct ns1__searchPatient *a, const char *type)
{
	size_t soap_flag_firstName = 1;
	size_t soap_flag_lastName = 1;
	size_t soap_flag_city = 1;
	size_t soap_flag_patientCode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__searchPatient *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__searchPatient, sizeof(struct ns1__searchPatient), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__searchPatient(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_firstName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "firstName", &a->firstName, "xsd:string"))
				{	soap_flag_firstName--;
					continue;
				}
			if (soap_flag_lastName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "lastName", &a->lastName, "xsd:string"))
				{	soap_flag_lastName--;
					continue;
				}
			if (soap_flag_city && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "city", &a->city, "xsd:string"))
				{	soap_flag_city--;
					continue;
				}
			if (soap_flag_patientCode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "patientCode", &a->patientCode, "xsd:string"))
				{	soap_flag_patientCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__searchPatient *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__searchPatient, 0, sizeof(struct ns1__searchPatient), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__searchPatient(struct soap *soap, const struct ns1__searchPatient *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__searchPatient);
	if (soap_out_ns1__searchPatient(soap, tag?tag:"ns1:searchPatient", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__searchPatient * SOAP_FMAC4 soap_get_ns1__searchPatient(struct soap *soap, struct ns1__searchPatient *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__searchPatient(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__searchPatient * SOAP_FMAC2 soap_instantiate_ns1__searchPatient(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__searchPatient(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__searchPatient, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns1__searchPatient);
		if (size)
			*size = sizeof(struct ns1__searchPatient);
	}
	else
	{	cp->ptr = (void*)new (struct ns1__searchPatient[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__searchPatient);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__searchPatient*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__searchPatient(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__searchPatient %p -> %p\n", q, p));
	*(struct ns1__searchPatient*)p = *(struct ns1__searchPatient*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__searchPatientResponse(struct soap *soap, struct ns1__searchPatientResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->searchPatientReturn = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__searchPatientResponse(struct soap *soap, const struct ns1__searchPatientResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToSimplePatientArray(soap, &a->searchPatientReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__searchPatientResponse(struct soap *soap, const char *tag, int id, const struct ns1__searchPatientResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__searchPatientResponse), type))
		return soap->error;
	if (soap_out_PointerToSimplePatientArray(soap, "searchPatientReturn", -1, &a->searchPatientReturn, "ns1:SimplePatient"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__searchPatientResponse * SOAP_FMAC4 soap_in_ns1__searchPatientResponse(struct soap *soap, const char *tag, struct ns1__searchPatientResponse *a, const char *type)
{
	size_t soap_flag_searchPatientReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__searchPatientResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__searchPatientResponse, sizeof(struct ns1__searchPatientResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__searchPatientResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_searchPatientReturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSimplePatientArray(soap, "searchPatientReturn", &a->searchPatientReturn, "ns1:SimplePatient"))
				{	soap_flag_searchPatientReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__searchPatientResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__searchPatientResponse, 0, sizeof(struct ns1__searchPatientResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__searchPatientResponse(struct soap *soap, const struct ns1__searchPatientResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__searchPatientResponse);
	if (soap_out_ns1__searchPatientResponse(soap, tag?tag:"ns1:searchPatientResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__searchPatientResponse * SOAP_FMAC4 soap_get_ns1__searchPatientResponse(struct soap *soap, struct ns1__searchPatientResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__searchPatientResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__searchPatientResponse * SOAP_FMAC2 soap_instantiate_ns1__searchPatientResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__searchPatientResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__searchPatientResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns1__searchPatientResponse);
		if (size)
			*size = sizeof(struct ns1__searchPatientResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns1__searchPatientResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__searchPatientResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__searchPatientResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__searchPatientResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__searchPatientResponse %p -> %p\n", q, p));
	*(struct ns1__searchPatientResponse*)p = *(struct ns1__searchPatientResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveImage(struct soap *soap, struct ns1__saveImage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->patientId);
	soap_default_string(soap, &a->visitCode);
	soap_default_string(soap, &a->base64Image);
	soap_default_string(soap, &a->timeStamp);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveImage(struct soap *soap, const struct ns1__saveImage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->patientId);
	soap_serialize_string(soap, &a->visitCode);
	soap_serialize_string(soap, &a->base64Image);
	soap_serialize_string(soap, &a->timeStamp);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveImage(struct soap *soap, const char *tag, int id, const struct ns1__saveImage *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__saveImage), type))
		return soap->error;
	if (soap_out_string(soap, "patientId", -1, &a->patientId, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "visitCode", -1, &a->visitCode, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "base64Image", -1, &a->base64Image, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "timeStamp", -1, &a->timeStamp, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__saveImage * SOAP_FMAC4 soap_in_ns1__saveImage(struct soap *soap, const char *tag, struct ns1__saveImage *a, const char *type)
{
	size_t soap_flag_patientId = 1;
	size_t soap_flag_visitCode = 1;
	size_t soap_flag_base64Image = 1;
	size_t soap_flag_timeStamp = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__saveImage *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__saveImage, sizeof(struct ns1__saveImage), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__saveImage(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_patientId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "patientId", &a->patientId, "xsd:string"))
				{	soap_flag_patientId--;
					continue;
				}
			if (soap_flag_visitCode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "visitCode", &a->visitCode, "xsd:string"))
				{	soap_flag_visitCode--;
					continue;
				}
			if (soap_flag_base64Image && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "base64Image", &a->base64Image, "xsd:string"))
				{	soap_flag_base64Image--;
					continue;
				}
			if (soap_flag_timeStamp && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "timeStamp", &a->timeStamp, "xsd:string"))
				{	soap_flag_timeStamp--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__saveImage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__saveImage, 0, sizeof(struct ns1__saveImage), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveImage(struct soap *soap, const struct ns1__saveImage *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__saveImage);
	if (soap_out_ns1__saveImage(soap, tag?tag:"ns1:saveImage", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__saveImage * SOAP_FMAC4 soap_get_ns1__saveImage(struct soap *soap, struct ns1__saveImage *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__saveImage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__saveImage * SOAP_FMAC2 soap_instantiate_ns1__saveImage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__saveImage(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__saveImage, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns1__saveImage);
		if (size)
			*size = sizeof(struct ns1__saveImage);
	}
	else
	{	cp->ptr = (void*)new (struct ns1__saveImage[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__saveImage);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__saveImage*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveImage(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__saveImage %p -> %p\n", q, p));
	*(struct ns1__saveImage*)p = *(struct ns1__saveImage*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveData(struct soap *soap, struct ns1__saveData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->patientId);
	soap_default_string(soap, &a->visitCode);
	soap_default_string(soap, &a->data);
	soap_default_string(soap, &a->timeStamp);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveData(struct soap *soap, const struct ns1__saveData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->patientId);
	soap_serialize_string(soap, &a->visitCode);
	soap_serialize_string(soap, &a->data);
	soap_serialize_string(soap, &a->timeStamp);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveData(struct soap *soap, const char *tag, int id, const struct ns1__saveData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__saveData), type))
		return soap->error;
	if (soap_out_string(soap, "patientId", -1, &a->patientId, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "visitCode", -1, &a->visitCode, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "data", -1, &a->data, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "timeStamp", -1, &a->timeStamp, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__saveData * SOAP_FMAC4 soap_in_ns1__saveData(struct soap *soap, const char *tag, struct ns1__saveData *a, const char *type)
{
	size_t soap_flag_patientId = 1;
	size_t soap_flag_visitCode = 1;
	size_t soap_flag_data = 1;
	size_t soap_flag_timeStamp = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__saveData *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__saveData, sizeof(struct ns1__saveData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__saveData(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_patientId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "patientId", &a->patientId, "xsd:string"))
				{	soap_flag_patientId--;
					continue;
				}
			if (soap_flag_visitCode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "visitCode", &a->visitCode, "xsd:string"))
				{	soap_flag_visitCode--;
					continue;
				}
			if (soap_flag_data && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "data", &a->data, "xsd:string"))
				{	soap_flag_data--;
					continue;
				}
			if (soap_flag_timeStamp && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "timeStamp", &a->timeStamp, "xsd:string"))
				{	soap_flag_timeStamp--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__saveData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__saveData, 0, sizeof(struct ns1__saveData), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveData(struct soap *soap, const struct ns1__saveData *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__saveData);
	if (soap_out_ns1__saveData(soap, tag?tag:"ns1:saveData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__saveData * SOAP_FMAC4 soap_get_ns1__saveData(struct soap *soap, struct ns1__saveData *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__saveData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__saveData * SOAP_FMAC2 soap_instantiate_ns1__saveData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__saveData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__saveData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns1__saveData);
		if (size)
			*size = sizeof(struct ns1__saveData);
	}
	else
	{	cp->ptr = (void*)new (struct ns1__saveData[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__saveData);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__saveData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__saveData %p -> %p\n", q, p));
	*(struct ns1__saveData*)p = *(struct ns1__saveData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__printString(struct soap *soap, struct ns1__printString *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->in);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__printString(struct soap *soap, const struct ns1__printString *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->in);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__printString(struct soap *soap, const char *tag, int id, const struct ns1__printString *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__printString), type))
		return soap->error;
	if (soap_out_string(soap, "in", -1, &a->in, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__printString * SOAP_FMAC4 soap_in_ns1__printString(struct soap *soap, const char *tag, struct ns1__printString *a, const char *type)
{
	size_t soap_flag_in = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__printString *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__printString, sizeof(struct ns1__printString), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__printString(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "in", &a->in, "xsd:string"))
				{	soap_flag_in--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__printString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__printString, 0, sizeof(struct ns1__printString), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__printString(struct soap *soap, const struct ns1__printString *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__printString);
	if (soap_out_ns1__printString(soap, tag?tag:"ns1:printString", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__printString * SOAP_FMAC4 soap_get_ns1__printString(struct soap *soap, struct ns1__printString *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__printString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__printString * SOAP_FMAC2 soap_instantiate_ns1__printString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__printString(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__printString, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns1__printString);
		if (size)
			*size = sizeof(struct ns1__printString);
	}
	else
	{	cp->ptr = (void*)new (struct ns1__printString[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__printString);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__printString*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__printString(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__printString %p -> %p\n", q, p));
	*(struct ns1__printString*)p = *(struct ns1__printString*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__printStringResponse(struct soap *soap, struct ns1__printStringResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->printStringReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__printStringResponse(struct soap *soap, const struct ns1__printStringResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->printStringReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__printStringResponse(struct soap *soap, const char *tag, int id, const struct ns1__printStringResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__printStringResponse), type))
		return soap->error;
	if (soap_out_string(soap, "printStringReturn", -1, &a->printStringReturn, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__printStringResponse * SOAP_FMAC4 soap_in_ns1__printStringResponse(struct soap *soap, const char *tag, struct ns1__printStringResponse *a, const char *type)
{
	size_t soap_flag_printStringReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__printStringResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__printStringResponse, sizeof(struct ns1__printStringResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__printStringResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_printStringReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "printStringReturn", &a->printStringReturn, "xsd:string"))
				{	soap_flag_printStringReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__printStringResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__printStringResponse, 0, sizeof(struct ns1__printStringResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_printStringReturn > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__printStringResponse(struct soap *soap, const struct ns1__printStringResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__printStringResponse);
	if (soap_out_ns1__printStringResponse(soap, tag?tag:"ns1:printStringResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__printStringResponse * SOAP_FMAC4 soap_get_ns1__printStringResponse(struct soap *soap, struct ns1__printStringResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__printStringResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__printStringResponse * SOAP_FMAC2 soap_instantiate_ns1__printStringResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__printStringResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__printStringResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns1__printStringResponse);
		if (size)
			*size = sizeof(struct ns1__printStringResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns1__printStringResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__printStringResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__printStringResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__printStringResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__printStringResponse %p -> %p\n", q, p));
	*(struct ns1__printStringResponse*)p = *(struct ns1__printStringResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__hello(struct soap *soap, struct ns1__hello *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__hello(struct soap *soap, const struct ns1__hello *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__hello(struct soap *soap, const char *tag, int id, const struct ns1__hello *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__hello), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__hello * SOAP_FMAC4 soap_in_ns1__hello(struct soap *soap, const char *tag, struct ns1__hello *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__hello *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__hello, sizeof(struct ns1__hello), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__hello(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__hello *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__hello, 0, sizeof(struct ns1__hello), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__hello(struct soap *soap, const struct ns1__hello *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__hello);
	if (soap_out_ns1__hello(soap, tag?tag:"ns1:hello", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__hello * SOAP_FMAC4 soap_get_ns1__hello(struct soap *soap, struct ns1__hello *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__hello(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__hello * SOAP_FMAC2 soap_instantiate_ns1__hello(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__hello(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__hello, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns1__hello);
		if (size)
			*size = sizeof(struct ns1__hello);
	}
	else
	{	cp->ptr = (void*)new (struct ns1__hello[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__hello);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__hello*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__hello(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__hello %p -> %p\n", q, p));
	*(struct ns1__hello*)p = *(struct ns1__hello*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__helloResponse(struct soap *soap, struct ns1__helloResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->helloReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__helloResponse(struct soap *soap, const struct ns1__helloResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->helloReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__helloResponse(struct soap *soap, const char *tag, int id, const struct ns1__helloResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__helloResponse), type))
		return soap->error;
	if (soap_out_string(soap, "helloReturn", -1, &a->helloReturn, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__helloResponse * SOAP_FMAC4 soap_in_ns1__helloResponse(struct soap *soap, const char *tag, struct ns1__helloResponse *a, const char *type)
{
	size_t soap_flag_helloReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__helloResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__helloResponse, sizeof(struct ns1__helloResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__helloResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_helloReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "helloReturn", &a->helloReturn, "xsd:string"))
				{	soap_flag_helloReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__helloResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__helloResponse, 0, sizeof(struct ns1__helloResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_helloReturn > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__helloResponse(struct soap *soap, const struct ns1__helloResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__helloResponse);
	if (soap_out_ns1__helloResponse(soap, tag?tag:"ns1:helloResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__helloResponse * SOAP_FMAC4 soap_get_ns1__helloResponse(struct soap *soap, struct ns1__helloResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__helloResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__helloResponse * SOAP_FMAC2 soap_instantiate_ns1__helloResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__helloResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__helloResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns1__helloResponse);
		if (size)
			*size = sizeof(struct ns1__helloResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns1__helloResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__helloResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__helloResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__helloResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__helloResponse %p -> %p\n", q, p));
	*(struct ns1__helloResponse*)p = *(struct ns1__helloResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPatientById(struct soap *soap, struct ns1__getPatientById *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPatientById(struct soap *soap, const struct ns1__getPatientById *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->id);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPatientById(struct soap *soap, const char *tag, int id, const struct ns1__getPatientById *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getPatientById), type))
		return soap->error;
	if (soap_out_string(soap, "id", -1, &a->id, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getPatientById * SOAP_FMAC4 soap_in_ns1__getPatientById(struct soap *soap, const char *tag, struct ns1__getPatientById *a, const char *type)
{
	size_t soap_flag_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getPatientById *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getPatientById, sizeof(struct ns1__getPatientById), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__getPatientById(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "id", &a->id, "xsd:string"))
				{	soap_flag_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getPatientById *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getPatientById, 0, sizeof(struct ns1__getPatientById), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPatientById(struct soap *soap, const struct ns1__getPatientById *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__getPatientById);
	if (soap_out_ns1__getPatientById(soap, tag?tag:"ns1:getPatientById", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__getPatientById * SOAP_FMAC4 soap_get_ns1__getPatientById(struct soap *soap, struct ns1__getPatientById *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getPatientById(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__getPatientById * SOAP_FMAC2 soap_instantiate_ns1__getPatientById(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getPatientById(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getPatientById, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns1__getPatientById);
		if (size)
			*size = sizeof(struct ns1__getPatientById);
	}
	else
	{	cp->ptr = (void*)new (struct ns1__getPatientById[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__getPatientById);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__getPatientById*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getPatientById(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__getPatientById %p -> %p\n", q, p));
	*(struct ns1__getPatientById*)p = *(struct ns1__getPatientById*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPatientByIdResponse(struct soap *soap, struct ns1__getPatientByIdResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->getPatientByIdReturn = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPatientByIdResponse(struct soap *soap, const struct ns1__getPatientByIdResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__Patient(soap, &a->getPatientByIdReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPatientByIdResponse(struct soap *soap, const char *tag, int id, const struct ns1__getPatientByIdResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getPatientByIdResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__Patient(soap, "getPatientByIdReturn", -1, &a->getPatientByIdReturn, "ns1:Patient"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getPatientByIdResponse * SOAP_FMAC4 soap_in_ns1__getPatientByIdResponse(struct soap *soap, const char *tag, struct ns1__getPatientByIdResponse *a, const char *type)
{
	size_t soap_flag_getPatientByIdReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getPatientByIdResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getPatientByIdResponse, sizeof(struct ns1__getPatientByIdResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__getPatientByIdResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getPatientByIdReturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__Patient(soap, "getPatientByIdReturn", &a->getPatientByIdReturn, "ns1:Patient"))
				{	soap_flag_getPatientByIdReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getPatientByIdResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getPatientByIdResponse, 0, sizeof(struct ns1__getPatientByIdResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPatientByIdResponse(struct soap *soap, const struct ns1__getPatientByIdResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__getPatientByIdResponse);
	if (soap_out_ns1__getPatientByIdResponse(soap, tag?tag:"ns1:getPatientByIdResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__getPatientByIdResponse * SOAP_FMAC4 soap_get_ns1__getPatientByIdResponse(struct soap *soap, struct ns1__getPatientByIdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getPatientByIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__getPatientByIdResponse * SOAP_FMAC2 soap_instantiate_ns1__getPatientByIdResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getPatientByIdResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getPatientByIdResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns1__getPatientByIdResponse);
		if (size)
			*size = sizeof(struct ns1__getPatientByIdResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns1__getPatientByIdResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__getPatientByIdResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__getPatientByIdResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getPatientByIdResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__getPatientByIdResponse %p -> %p\n", q, p));
	*(struct ns1__getPatientByIdResponse*)p = *(struct ns1__getPatientByIdResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSimplePatientArray(struct soap *soap, SimplePatientArray *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSimplePatientArray(struct soap *soap, const char *tag, int id, SimplePatientArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_SimplePatientArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SimplePatientArray ** SOAP_FMAC4 soap_in_PointerToSimplePatientArray(struct soap *soap, const char *tag, SimplePatientArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SimplePatientArray **)soap_malloc(soap, sizeof(SimplePatientArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SimplePatientArray *)soap_instantiate_SimplePatientArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	SimplePatientArray ** p = (SimplePatientArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SimplePatientArray, sizeof(SimplePatientArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSimplePatientArray(struct soap *soap, SimplePatientArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSimplePatientArray);
	if (soap_out_PointerToSimplePatientArray(soap, tag?tag:"SOAP-ENC:Array", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 SimplePatientArray ** SOAP_FMAC4 soap_get_PointerToSimplePatientArray(struct soap *soap, SimplePatientArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSimplePatientArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Patient(struct soap *soap, ns1__Patient *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Patient))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Patient(struct soap *soap, const char *tag, int id, ns1__Patient *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Patient);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Patient ** SOAP_FMAC4 soap_in_PointerTons1__Patient(struct soap *soap, const char *tag, ns1__Patient **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Patient **)soap_malloc(soap, sizeof(ns1__Patient *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Patient *)soap_instantiate_ns1__Patient(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Patient ** p = (ns1__Patient **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Patient, sizeof(ns1__Patient), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Patient(struct soap *soap, ns1__Patient *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Patient);
	if (soap_out_PointerTons1__Patient(soap, tag?tag:"ns1:Patient", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Patient ** SOAP_FMAC4 soap_get_PointerTons1__Patient(struct soap *soap, ns1__Patient **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Patient(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__SimplePatient(struct soap *soap, ns1__SimplePatient **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__SimplePatient))
		soap_serialize_PointerTons1__SimplePatient(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__SimplePatient(struct soap *soap, const char *tag, int id, ns1__SimplePatient **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__SimplePatient);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__SimplePatient(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__SimplePatient *** SOAP_FMAC4 soap_in_PointerToPointerTons1__SimplePatient(struct soap *soap, const char *tag, ns1__SimplePatient ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__SimplePatient ***)soap_malloc(soap, sizeof(ns1__SimplePatient **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__SimplePatient(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__SimplePatient ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__SimplePatient, sizeof(ns1__SimplePatient *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__SimplePatient(struct soap *soap, ns1__SimplePatient **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__SimplePatient);
	if (soap_out_PointerToPointerTons1__SimplePatient(soap, tag?tag:"ns1:SimplePatient", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__SimplePatient *** SOAP_FMAC4 soap_get_PointerToPointerTons1__SimplePatient(struct soap *soap, ns1__SimplePatient ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__SimplePatient(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SimplePatient(struct soap *soap, ns1__SimplePatient *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__SimplePatient))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SimplePatient(struct soap *soap, const char *tag, int id, ns1__SimplePatient *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__SimplePatient);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__SimplePatient ** SOAP_FMAC4 soap_in_PointerTons1__SimplePatient(struct soap *soap, const char *tag, ns1__SimplePatient **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__SimplePatient **)soap_malloc(soap, sizeof(ns1__SimplePatient *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__SimplePatient *)soap_instantiate_ns1__SimplePatient(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__SimplePatient ** p = (ns1__SimplePatient **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__SimplePatient, sizeof(ns1__SimplePatient), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SimplePatient(struct soap *soap, ns1__SimplePatient *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__SimplePatient);
	if (soap_out_PointerTons1__SimplePatient(soap, tag?tag:"ns1:SimplePatient", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__SimplePatient ** SOAP_FMAC4 soap_get_PointerTons1__SimplePatient(struct soap *soap, ns1__SimplePatient **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__SimplePatient(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__TherapyReport(struct soap *soap, ns1__TherapyReport **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__TherapyReport))
		soap_serialize_PointerTons1__TherapyReport(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__TherapyReport(struct soap *soap, const char *tag, int id, ns1__TherapyReport **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__TherapyReport);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__TherapyReport(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__TherapyReport *** SOAP_FMAC4 soap_in_PointerToPointerTons1__TherapyReport(struct soap *soap, const char *tag, ns1__TherapyReport ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__TherapyReport ***)soap_malloc(soap, sizeof(ns1__TherapyReport **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__TherapyReport(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__TherapyReport ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__TherapyReport, sizeof(ns1__TherapyReport *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__TherapyReport(struct soap *soap, ns1__TherapyReport **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__TherapyReport);
	if (soap_out_PointerToPointerTons1__TherapyReport(soap, tag?tag:"ns1:TherapyReport", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__TherapyReport *** SOAP_FMAC4 soap_get_PointerToPointerTons1__TherapyReport(struct soap *soap, ns1__TherapyReport ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__TherapyReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TherapyReport(struct soap *soap, ns1__TherapyReport *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__TherapyReport))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TherapyReport(struct soap *soap, const char *tag, int id, ns1__TherapyReport *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__TherapyReport);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__TherapyReport ** SOAP_FMAC4 soap_in_PointerTons1__TherapyReport(struct soap *soap, const char *tag, ns1__TherapyReport **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__TherapyReport **)soap_malloc(soap, sizeof(ns1__TherapyReport *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__TherapyReport *)soap_instantiate_ns1__TherapyReport(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__TherapyReport ** p = (ns1__TherapyReport **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__TherapyReport, sizeof(ns1__TherapyReport), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TherapyReport(struct soap *soap, ns1__TherapyReport *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__TherapyReport);
	if (soap_out_PointerTons1__TherapyReport(soap, tag?tag:"ns1:TherapyReport", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__TherapyReport ** SOAP_FMAC4 soap_get_PointerTons1__TherapyReport(struct soap *soap, ns1__TherapyReport **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__TherapyReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__Anamnesi(struct soap *soap, ns1__Anamnesi **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__Anamnesi))
		soap_serialize_PointerTons1__Anamnesi(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__Anamnesi(struct soap *soap, const char *tag, int id, ns1__Anamnesi **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__Anamnesi);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__Anamnesi(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__Anamnesi *** SOAP_FMAC4 soap_in_PointerToPointerTons1__Anamnesi(struct soap *soap, const char *tag, ns1__Anamnesi ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Anamnesi ***)soap_malloc(soap, sizeof(ns1__Anamnesi **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__Anamnesi(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__Anamnesi ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__Anamnesi, sizeof(ns1__Anamnesi *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__Anamnesi(struct soap *soap, ns1__Anamnesi **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__Anamnesi);
	if (soap_out_PointerToPointerTons1__Anamnesi(soap, tag?tag:"ns1:Anamnesi", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Anamnesi *** SOAP_FMAC4 soap_get_PointerToPointerTons1__Anamnesi(struct soap *soap, ns1__Anamnesi ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__Anamnesi(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Anamnesi(struct soap *soap, ns1__Anamnesi *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Anamnesi))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Anamnesi(struct soap *soap, const char *tag, int id, ns1__Anamnesi *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Anamnesi);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Anamnesi ** SOAP_FMAC4 soap_in_PointerTons1__Anamnesi(struct soap *soap, const char *tag, ns1__Anamnesi **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Anamnesi **)soap_malloc(soap, sizeof(ns1__Anamnesi *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Anamnesi *)soap_instantiate_ns1__Anamnesi(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Anamnesi ** p = (ns1__Anamnesi **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Anamnesi, sizeof(ns1__Anamnesi), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Anamnesi(struct soap *soap, ns1__Anamnesi *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Anamnesi);
	if (soap_out_PointerTons1__Anamnesi(soap, tag?tag:"ns1:Anamnesi", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Anamnesi ** SOAP_FMAC4 soap_get_PointerTons1__Anamnesi(struct soap *soap, ns1__Anamnesi **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Anamnesi(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__ImageItem(struct soap *soap, ns1__ImageItem **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__ImageItem))
		soap_serialize_PointerTons1__ImageItem(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__ImageItem(struct soap *soap, const char *tag, int id, ns1__ImageItem **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__ImageItem);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__ImageItem(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__ImageItem *** SOAP_FMAC4 soap_in_PointerToPointerTons1__ImageItem(struct soap *soap, const char *tag, ns1__ImageItem ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ImageItem ***)soap_malloc(soap, sizeof(ns1__ImageItem **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__ImageItem(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__ImageItem ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__ImageItem, sizeof(ns1__ImageItem *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__ImageItem(struct soap *soap, ns1__ImageItem **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__ImageItem);
	if (soap_out_PointerToPointerTons1__ImageItem(soap, tag?tag:"ns1:ImageItem", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ImageItem *** SOAP_FMAC4 soap_get_PointerToPointerTons1__ImageItem(struct soap *soap, ns1__ImageItem ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__ImageItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ImageItem(struct soap *soap, ns1__ImageItem *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ImageItem))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ImageItem(struct soap *soap, const char *tag, int id, ns1__ImageItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ImageItem);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ImageItem ** SOAP_FMAC4 soap_in_PointerTons1__ImageItem(struct soap *soap, const char *tag, ns1__ImageItem **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ImageItem **)soap_malloc(soap, sizeof(ns1__ImageItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ImageItem *)soap_instantiate_ns1__ImageItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ImageItem ** p = (ns1__ImageItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ImageItem, sizeof(ns1__ImageItem), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ImageItem(struct soap *soap, ns1__ImageItem *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ImageItem);
	if (soap_out_PointerTons1__ImageItem(soap, tag?tag:"ns1:ImageItem", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ImageItem ** SOAP_FMAC4 soap_get_PointerTons1__ImageItem(struct soap *soap, ns1__ImageItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ImageItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__KeyValueObject(struct soap *soap, ns1__KeyValueObject **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__KeyValueObject))
		soap_serialize_PointerTons1__KeyValueObject(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__KeyValueObject(struct soap *soap, const char *tag, int id, ns1__KeyValueObject **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__KeyValueObject);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__KeyValueObject(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__KeyValueObject *** SOAP_FMAC4 soap_in_PointerToPointerTons1__KeyValueObject(struct soap *soap, const char *tag, ns1__KeyValueObject ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__KeyValueObject ***)soap_malloc(soap, sizeof(ns1__KeyValueObject **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__KeyValueObject(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__KeyValueObject ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__KeyValueObject, sizeof(ns1__KeyValueObject *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__KeyValueObject(struct soap *soap, ns1__KeyValueObject **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__KeyValueObject);
	if (soap_out_PointerToPointerTons1__KeyValueObject(soap, tag?tag:"ns1:KeyValueObject", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__KeyValueObject *** SOAP_FMAC4 soap_get_PointerToPointerTons1__KeyValueObject(struct soap *soap, ns1__KeyValueObject ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__KeyValueObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__KeyValueObject(struct soap *soap, ns1__KeyValueObject *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__KeyValueObject))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__KeyValueObject(struct soap *soap, const char *tag, int id, ns1__KeyValueObject *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__KeyValueObject);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__KeyValueObject ** SOAP_FMAC4 soap_in_PointerTons1__KeyValueObject(struct soap *soap, const char *tag, ns1__KeyValueObject **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__KeyValueObject **)soap_malloc(soap, sizeof(ns1__KeyValueObject *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__KeyValueObject *)soap_instantiate_ns1__KeyValueObject(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__KeyValueObject ** p = (ns1__KeyValueObject **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__KeyValueObject, sizeof(ns1__KeyValueObject), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__KeyValueObject(struct soap *soap, ns1__KeyValueObject *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__KeyValueObject);
	if (soap_out_PointerTons1__KeyValueObject(soap, tag?tag:"ns1:KeyValueObject", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__KeyValueObject ** SOAP_FMAC4 soap_get_PointerTons1__KeyValueObject(struct soap *soap, ns1__KeyValueObject **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__KeyValueObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToTherapyReportArray(struct soap *soap, TherapyReportArray *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToTherapyReportArray(struct soap *soap, const char *tag, int id, TherapyReportArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_TherapyReportArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 TherapyReportArray ** SOAP_FMAC4 soap_in_PointerToTherapyReportArray(struct soap *soap, const char *tag, TherapyReportArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (TherapyReportArray **)soap_malloc(soap, sizeof(TherapyReportArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (TherapyReportArray *)soap_instantiate_TherapyReportArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	TherapyReportArray ** p = (TherapyReportArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_TherapyReportArray, sizeof(TherapyReportArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToTherapyReportArray(struct soap *soap, TherapyReportArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToTherapyReportArray);
	if (soap_out_PointerToTherapyReportArray(soap, tag?tag:"SOAP-ENC:Array", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 TherapyReportArray ** SOAP_FMAC4 soap_get_PointerToTherapyReportArray(struct soap *soap, TherapyReportArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToTherapyReportArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToAnamnesiArray(struct soap *soap, AnamnesiArray *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToAnamnesiArray(struct soap *soap, const char *tag, int id, AnamnesiArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_AnamnesiArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 AnamnesiArray ** SOAP_FMAC4 soap_in_PointerToAnamnesiArray(struct soap *soap, const char *tag, AnamnesiArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (AnamnesiArray **)soap_malloc(soap, sizeof(AnamnesiArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (AnamnesiArray *)soap_instantiate_AnamnesiArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	AnamnesiArray ** p = (AnamnesiArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_AnamnesiArray, sizeof(AnamnesiArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToAnamnesiArray(struct soap *soap, AnamnesiArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToAnamnesiArray);
	if (soap_out_PointerToAnamnesiArray(soap, tag?tag:"SOAP-ENC:Array", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 AnamnesiArray ** SOAP_FMAC4 soap_get_PointerToAnamnesiArray(struct soap *soap, AnamnesiArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToAnamnesiArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MedicalReport(struct soap *soap, ns1__MedicalReport *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__MedicalReport))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MedicalReport(struct soap *soap, const char *tag, int id, ns1__MedicalReport *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__MedicalReport);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__MedicalReport ** SOAP_FMAC4 soap_in_PointerTons1__MedicalReport(struct soap *soap, const char *tag, ns1__MedicalReport **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__MedicalReport **)soap_malloc(soap, sizeof(ns1__MedicalReport *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__MedicalReport *)soap_instantiate_ns1__MedicalReport(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__MedicalReport ** p = (ns1__MedicalReport **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__MedicalReport, sizeof(ns1__MedicalReport), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MedicalReport(struct soap *soap, ns1__MedicalReport *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__MedicalReport);
	if (soap_out_PointerTons1__MedicalReport(soap, tag?tag:"ns1:MedicalReport", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__MedicalReport ** SOAP_FMAC4 soap_get_PointerTons1__MedicalReport(struct soap *soap, ns1__MedicalReport **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__MedicalReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToImageItemArray(struct soap *soap, ImageItemArray *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToImageItemArray(struct soap *soap, const char *tag, int id, ImageItemArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_ImageItemArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ImageItemArray ** SOAP_FMAC4 soap_in_PointerToImageItemArray(struct soap *soap, const char *tag, ImageItemArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ImageItemArray **)soap_malloc(soap, sizeof(ImageItemArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ImageItemArray *)soap_instantiate_ImageItemArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ImageItemArray ** p = (ImageItemArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ImageItemArray, sizeof(ImageItemArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToImageItemArray(struct soap *soap, ImageItemArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToImageItemArray);
	if (soap_out_PointerToImageItemArray(soap, tag?tag:"SOAP-ENC:Array", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ImageItemArray ** SOAP_FMAC4 soap_get_PointerToImageItemArray(struct soap *soap, ImageItemArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToImageItemArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToKeyValueObjectArray(struct soap *soap, KeyValueObjectArray *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToKeyValueObjectArray(struct soap *soap, const char *tag, int id, KeyValueObjectArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_KeyValueObjectArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 KeyValueObjectArray ** SOAP_FMAC4 soap_in_PointerToKeyValueObjectArray(struct soap *soap, const char *tag, KeyValueObjectArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (KeyValueObjectArray **)soap_malloc(soap, sizeof(KeyValueObjectArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (KeyValueObjectArray *)soap_instantiate_KeyValueObjectArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	KeyValueObjectArray ** p = (KeyValueObjectArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_KeyValueObjectArray, sizeof(KeyValueObjectArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToKeyValueObjectArray(struct soap *soap, KeyValueObjectArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToKeyValueObjectArray);
	if (soap_out_PointerToKeyValueObjectArray(soap, tag?tag:"SOAP-ENC:Array", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 KeyValueObjectArray ** SOAP_FMAC4 soap_get_PointerToKeyValueObjectArray(struct soap *soap, KeyValueObjectArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToKeyValueObjectArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Anagrafica(struct soap *soap, ns1__Anagrafica *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Anagrafica))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Anagrafica(struct soap *soap, const char *tag, int id, ns1__Anagrafica *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Anagrafica);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Anagrafica ** SOAP_FMAC4 soap_in_PointerTons1__Anagrafica(struct soap *soap, const char *tag, ns1__Anagrafica **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Anagrafica **)soap_malloc(soap, sizeof(ns1__Anagrafica *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Anagrafica *)soap_instantiate_ns1__Anagrafica(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Anagrafica ** p = (ns1__Anagrafica **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Anagrafica, sizeof(ns1__Anagrafica), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Anagrafica(struct soap *soap, ns1__Anagrafica *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Anagrafica);
	if (soap_out_PointerTons1__Anagrafica(soap, tag?tag:"ns1:Anagrafica", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Anagrafica ** SOAP_FMAC4 soap_get_PointerTons1__Anagrafica(struct soap *soap, ns1__Anagrafica **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Anagrafica(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
