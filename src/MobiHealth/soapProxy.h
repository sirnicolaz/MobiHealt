/* soapProxy.h
   Generated by wsdl2h 1.2.15 from Mobi.wsdl and typemap.dat
   2010-04-10 13:58:58 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2009 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Build Notes

NOTE:

 - Run soapcpp2 on soapProxy.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
GPL or Genivia's license for commercial use.

GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
A commercial use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://schema.example.com                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://schema.example.com"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://schema.example.com"
//gsoap ns1   schema namespace:	http://schema.example.com
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns1__Patient.
class ns1__Patient;

//  Forward declaration of class ns1__Anagrafica.
class ns1__Anagrafica;

//  Forward declaration of class KeyValueObjectArray.
class KeyValueObjectArray;

//  Forward declaration of class ns1__KeyValueObject.
class ns1__KeyValueObject;

//  Forward declaration of class ImageItemArray.
class ImageItemArray;

//  Forward declaration of class ns1__ImageItem.
class ns1__ImageItem;

//  Forward declaration of class ns1__MedicalReport.
class ns1__MedicalReport;

//  Forward declaration of class AnamnesiArray.
class AnamnesiArray;

//  Forward declaration of class ns1__Anamnesi.
class ns1__Anamnesi;

//  Forward declaration of class TherapyReportArray.
class TherapyReportArray;

//  Forward declaration of class ns1__TherapyReport.
class ns1__TherapyReport;

//  Forward declaration of class SimplePatientArray.
class SimplePatientArray;

//  Forward declaration of class ns1__SimplePatient.
class ns1__SimplePatient;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schema.example.com                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schema.example.com                                                *
 *                                                                            *
\******************************************************************************/


/// "http://schema.example.com":Patient is a complexType.
class ns1__Patient
{ public:
/// Element anagrafica of type "http://schema.example.com":Anagrafica.
    ns1__Anagrafica*                     anagrafica                     1;	///< Required element.
/// Element contacts of type "http://schema.example.com":KeyValueObjectArray.
    KeyValueObjectArray*                 contacts                       1;	///< Required element.
/// Element images of type "http://schema.example.com":ImageItemArray.
    ImageItemArray*                      images                         1;	///< Required element.
/// Element medicalReport of type "http://schema.example.com":MedicalReport.
    ns1__MedicalReport*                  medicalReport                  1;	///< Required element.
/// Element pathologies of type "http://schema.example.com":KeyValueObjectArray.
    KeyValueObjectArray*                 pathologies                    1;	///< Required element.
/// Element patientId of type xs:string.
    char*                                patientId                      1;	///< Required element.
/// Element visitHistory of type "http://schema.example.com":KeyValueObjectArray.
    KeyValueObjectArray*                 visitHistory                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schema.example.com":Anagrafica is a complexType.
class ns1__Anagrafica
{ public:
/// Element CF of type xs:string.
    char*                                CF                             1;	///< Required element.
/// Element GP of type xs:string.
    char*                                GP                             1;	///< Required element.
/// Element address of type xs:string.
    char*                                address                        1;	///< Required element.
/// Element birthDate of type xs:string.
    char*                                birthDate                      1;	///< Required element.
/// Element birthLocation of type xs:string.
    char*                                birthLocation                  1;	///< Required element.
/// Element cap of type xs:string.
    char*                                cap                            1;	///< Required element.
/// Element city of type xs:string.
    char*                                city                           1;	///< Required element.
/// Element lastName of type xs:string.
    char*                                lastName                       1;	///< Required element.
/// Element marital of type xs:string.
    char*                                marital                        1;	///< Required element.
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
/// Element patientCode of type xs:string.
    char*                                patientCode                    1;	///< Required element.
/// Element patientId of type xs:string.
    char*                                patientId                      1;	///< Required element.
/// Element profession of type xs:string.
    char*                                profession                     1;	///< Required element.
/// Element province of type xs:string.
    char*                                province                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schema.example.com":KeyValueObject is a complexType.
class ns1__KeyValueObject
{ public:
/// Element key of type xs:string.
    char*                                key                            1;	///< Required element.
/// Element objectId of type xs:string.
    char*                                objectId                       1;	///< Required element.
/// Element patientId of type xs:string.
    char*                                patientId                      1;	///< Required element.
/// Element value of type xs:string.
    char*                                value                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schema.example.com":ImageItem is a complexType.
class ns1__ImageItem
{ public:
/// Element base64Preview of type xs:string.
    char*                                base64Preview                  1;	///< Required element.
/// Element imageId of type xs:string.
    char*                                imageId                        1;	///< Required element.
/// Element imageNote of type xs:string.
    char*                                imageNote                      1;	///< Required element.
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
/// Element patientId of type xs:string.
    char*                                patientId                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schema.example.com":MedicalReport is a complexType.
class ns1__MedicalReport
{ public:
/// Element anamnesi of type "http://schema.example.com":AnamnesiArray.
    AnamnesiArray*                       anamnesi                       1;	///< Required element.
/// Element currentTherapies of type "http://schema.example.com":TherapyReportArray.
    TherapyReportArray*                  currentTherapies               1;	///< Required element.
/// Element patientId of type xs:string.
    char*                                patientId                      1;	///< Required element.
/// Element reports of type "http://schema.example.com":TherapyReportArray.
    TherapyReportArray*                  reports                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schema.example.com":Anamnesi is a complexType.
class ns1__Anamnesi
{ public:
/// Element anamnesiId of type xs:string.
    char*                                anamnesiId                     1;	///< Required element.
/// Element date of type xs:string.
    char*                                date                           1;	///< Required element.
/// Element patientId of type xs:string.
    char*                                patientId                      1;	///< Required element.
/// Element text of type xs:string.
    char*                                text                           1;	///< Required element.
/// Element title of type xs:string.
    char*                                title                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schema.example.com":TherapyReport is a complexType.
class ns1__TherapyReport
{ public:
/// Element objectId of type xs:string.
    char*                                objectId                       1;	///< Required element.
/// Element patientId of type xs:string.
    char*                                patientId                      1;	///< Required element.
/// Element text of type xs:string.
    char*                                text                           1;	///< Required element.
/// Element title of type xs:string.
    char*                                title                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schema.example.com":SimplePatient is a complexType.
class ns1__SimplePatient
{ public:
/// Element city of type xs:string.
    char*                                city                           1;	///< Required element.
/// Element lastName of type xs:string.
    char*                                lastName                       1;	///< Required element.
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
/// Element patientCode of type xs:string.
    char*                                patientCode                    1;	///< Required element.
/// Element patientId of type xs:string.
    char*                                patientId                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schema.example.com":KeyValueObjectArray is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://schema.example.com":KeyValueObject
class KeyValueObjectArray
{ public:
/// Pointer to array of ns1__KeyValueObject*.
    ns1__KeyValueObject*                *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schema.example.com":ImageItemArray is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://schema.example.com":ImageItem
class ImageItemArray
{ public:
/// Pointer to array of ns1__ImageItem*.
    ns1__ImageItem*                     *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schema.example.com":AnamnesiArray is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://schema.example.com":Anamnesi
class AnamnesiArray
{ public:
/// Pointer to array of ns1__Anamnesi*.
    ns1__Anamnesi*                      *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schema.example.com":TherapyReportArray is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://schema.example.com":TherapyReport
class TherapyReportArray
{ public:
/// Pointer to array of ns1__TherapyReport*.
    ns1__TherapyReport*                 *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schema.example.com":SimplePatientArray is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://schema.example.com":SimplePatient
class SimplePatientArray
{ public:
/// Pointer to array of ns1__SimplePatient*.
    ns1__SimplePatient*                 *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schema.example.com                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schema.example.com                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	MobiBinding 
//gsoap ns1  service type:	MobiPortType 
//gsoap ns1  service port:	http://192.168.1.5:8888/mobihealth/ws/service.php?class=Mobi 
//gsoap ns1  service namespace:	http://schema.example.com 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings
  - @ref MobiBinding

@section Service_more More Information
- @ref page_notes "Notes"
- @ref page_XMLDataBinding "XML Data Binding"
- @ref SOAP_ENV__Header "SOAP Header Content"
- @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page MobiBinding Binding "MobiBinding"

@section MobiBinding_operations Operations of Binding  "MobiBinding"
  - @ref ns1__getPatientById
  - @ref ns1__hello
  - @ref ns1__printString
  - @ref ns1__saveData
  - @ref ns1__saveImage
  - @ref ns1__searchPatient

@section MobiBinding_ports Endpoints of Binding  "MobiBinding"
  - http://192.168.1.5:8888/mobihealth/ws/service.php?class=Mobi

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   MobiBinding                                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getPatientById                                                      *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getPatientByIdResponse" of service binding "MobiBinding" operation "ns1__getPatientById"
struct ns1__getPatientByIdResponse
{
    ns1__Patient*                       getPatientByIdReturn;
};

/// Operation "ns1__getPatientById" of service binding "MobiBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="http://192.168.1.5:8888/mobihealth/ws/service.php?class=Mobi&method=getPatientById"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getPatientById(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               id,
    // response parameters:
    struct ns1__getPatientByIdResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getPatientById(
    struct soap *soap,
    // request parameters:
    char*                               id,
    // response parameters:
    struct ns1__getPatientByIdResponse&
  );
@endcode

C++ proxy class (defined in soapMobiBindingProxy.h):
@code
  class MobiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapMobiBindingService.h):
@code
  class MobiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getPatientById rpc
//gsoap ns1  service method-encoding:	getPatientById http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	getPatientById http://192.168.1.5:8888/mobihealth/ws/service.php?class=Mobi&method=getPatientById
int ns1__getPatientById(
    char*                               id,	///< Request parameter
    struct ns1__getPatientByIdResponse &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__hello                                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__hello" of service binding "MobiBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="http://192.168.1.5:8888/mobihealth/ws/service.php?class=Mobi&method=hello"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__hello(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    char*                              &helloReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__hello(
    struct soap *soap,
    // request parameters:
    // response parameters:
    char*                              &helloReturn
  );
@endcode

C++ proxy class (defined in soapMobiBindingProxy.h):
@code
  class MobiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapMobiBindingService.h):
@code
  class MobiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	hello rpc
//gsoap ns1  service method-encoding:	hello http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	hello http://192.168.1.5:8888/mobihealth/ws/service.php?class=Mobi&method=hello
int ns1__hello(
    char*                              &helloReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__printString                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__printString" of service binding "MobiBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="http://192.168.1.5:8888/mobihealth/ws/service.php?class=Mobi&method=printString"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__printString(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               in,
    // response parameters:
    char*                              &printStringReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__printString(
    struct soap *soap,
    // request parameters:
    char*                               in,
    // response parameters:
    char*                              &printStringReturn
  );
@endcode

C++ proxy class (defined in soapMobiBindingProxy.h):
@code
  class MobiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapMobiBindingService.h):
@code
  class MobiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	printString rpc
//gsoap ns1  service method-encoding:	printString http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	printString http://192.168.1.5:8888/mobihealth/ws/service.php?class=Mobi&method=printString
int ns1__printString(
    char*                               in,	///< Request parameter
    char*                              &printStringReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__saveData                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__saveData" of service binding "MobiBinding"

/**

Operation details:

  - One-way message
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="http://192.168.1.5:8888/mobihealth/ws/service.php?class=Mobi&method=saveData"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__saveData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               patientId,
    char*                               visitCode,
    char*                               data,
    char*                               timeStamp,
    // response parameters:
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__saveData(
    struct soap *soap,
    // request parameters:
    char*                               patientId,
    char*                               visitCode,
    char*                               data,
    char*                               timeStamp,
    // response parameters:
  );
@endcode

C++ proxy class (defined in soapMobiBindingProxy.h):
@code
  class MobiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapMobiBindingService.h):
@code
  class MobiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	saveData rpc
//gsoap ns1  service method-encoding:	saveData http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	saveData http://192.168.1.5:8888/mobihealth/ws/service.php?class=Mobi&method=saveData
int ns1__saveData(
    char*                               patientId,	///< Request parameter
    char*                               visitCode,	///< Request parameter
    char*                               data,	///< Request parameter
    char*                               timeStamp,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__saveImage                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__saveImage" of service binding "MobiBinding"

/**

Operation details:

  - One-way message
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="http://192.168.1.5:8888/mobihealth/ws/service.php?class=Mobi&method=saveImage"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__saveImage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               patientId,
    char*                               visitCode,
    char*                               base64Image,
    char*                               timeStamp,
    // response parameters:
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__saveImage(
    struct soap *soap,
    // request parameters:
    char*                               patientId,
    char*                               visitCode,
    char*                               base64Image,
    char*                               timeStamp,
    // response parameters:
  );
@endcode

C++ proxy class (defined in soapMobiBindingProxy.h):
@code
  class MobiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapMobiBindingService.h):
@code
  class MobiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	saveImage rpc
//gsoap ns1  service method-encoding:	saveImage http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	saveImage http://192.168.1.5:8888/mobihealth/ws/service.php?class=Mobi&method=saveImage
int ns1__saveImage(
    char*                               patientId,	///< Request parameter
    char*                               visitCode,	///< Request parameter
    char*                               base64Image,	///< Request parameter
    char*                               timeStamp,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__searchPatient                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__searchPatientResponse" of service binding "MobiBinding" operation "ns1__searchPatient"
struct ns1__searchPatientResponse
{
    SimplePatientArray*                 searchPatientReturn;
};

/// Operation "ns1__searchPatient" of service binding "MobiBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="http://192.168.1.5:8888/mobihealth/ws/service.php?class=Mobi&method=searchPatient"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__searchPatient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               firstName,
    char*                               lastName,
    char*                               city,
    char*                               patientCode,
    // response parameters:
    struct ns1__searchPatientResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__searchPatient(
    struct soap *soap,
    // request parameters:
    char*                               firstName,
    char*                               lastName,
    char*                               city,
    char*                               patientCode,
    // response parameters:
    struct ns1__searchPatientResponse&
  );
@endcode

C++ proxy class (defined in soapMobiBindingProxy.h):
@code
  class MobiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapMobiBindingService.h):
@code
  class MobiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	searchPatient rpc
//gsoap ns1  service method-encoding:	searchPatient http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	searchPatient http://192.168.1.5:8888/mobihealth/ws/service.php?class=Mobi&method=searchPatient
int ns1__searchPatient(
    char*                               firstName,	///< Request parameter
    char*                               lastName,	///< Request parameter
    char*                               city,	///< Request parameter
    char*                               patientCode,	///< Request parameter
    struct ns1__searchPatientResponse  &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings are adopted from XML schemas as part of the WSDL types section or when running wsdl2h on a set of schemas.

The following readers and writers are C/C++ data type (de)serializers auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the (de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in your code to import these data type and function declarations. Only use the soapcpp2-generated files in your project build. Do not include the wsdl2h-generated .h file in your code.

XML content can be retrieved from:
  - a FILE* fd, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a FILE* fd, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema "http://schema.example.com"

*/

/* End of soapProxy.h */
